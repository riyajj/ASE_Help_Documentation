{
  "api/ASE_Riya_Joshi_77356746.AppArray.html": {
    "href": "api/ASE_Riya_Joshi_77356746.AppArray.html",
    "title": "Class AppArray | ASE Project",
    "keywords": "Class AppArray Namespace ASE_Riya_Joshi_77356746 Assembly ASE_Riya_Joshi_77356746.dll Represents an array that can hold either integer or real values. This class provides methods for defining, accessing, and manipulating arrays. public class AppArray : Evaluation, ICommand Inheritance object Command Evaluation AppArray Implements ICommand Derived AppPeek AppPoke Inherited Members Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppArray() Initializes a new instance of the AppArray class. public AppArray() Fields IntValue protected int IntValue Field Value int PEEK protected const bool PEEK = false Field Value bool POKE public const bool POKE = true Field Value bool RealValue protected double RealValue Field Value double columnCurrent protected int columnCurrent Field Value int columnExpression protected string columnExpression Field Value string columnsCount protected int columnsCount Field Value int intArray protected int[,] intArray Field Value int[,] peekValue protected string peekValue Field Value string pokeValue protected string pokeValue Field Value string realArray protected double[,] realArray Field Value double[,] rowCurrent protected int rowCurrent Field Value int rowExpression protected string rowExpression Field Value string rowsCount protected int rowsCount Field Value int type protected string type Field Value string Properties Columns Gets the number of columns in the array. protected int Columns { get; } Property Value int Rows Gets the number of rows in the array. protected int Rows { get; } Property Value int Methods ArrayRestrictions() Applies restrictions for the array. This method can be overridden to implement specific restrictions. public void ArrayRestrictions() CheckParameters(string[]) Checks the parameters provided for the array command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The parameters to validate. Exceptions CommandException Thrown when the parameter count is invalid. Compile() Compiles the array definition by validating parameters and adding the variable to the program. public override void Compile() Exceptions CommandException Thrown when the array definition is invalid. Execute() Executes the array initialization, creating the array based on its type. public override void Execute() Exceptions CommandException Thrown when the array type is unsupported. GetIntArray(int, int) Gets the integer value at the specified row and column from the integer array. public virtual int GetIntArray(int row, int col) Parameters row int The row index. col int The column index. Returns int The integer value at the specified indices. Exceptions CommandException Thrown when the specified index is out of bounds. GetRealArray(int, int) Gets the real value at the specified row and column from the real array. public virtual double GetRealArray(int row, int col) Parameters row int The row index. col int The column index. Returns double The real value at the specified indices. Exceptions CommandException Thrown when the specified index is out of bounds. ProcessArrayParametersCompile(bool) Processes the parameters for poke or peek operations during compilation. protected virtual void ProcessArrayParametersCompile(bool isPokeOperation) Parameters isPokeOperation bool Indicates if the operation is a poke (set) operation. Exceptions CommandException Thrown when the operation syntax is invalid. ProcessArrayParametersExecute(bool) Processes the parameters for poke or peek operations during execution. protected virtual void ProcessArrayParametersExecute(bool isPokeOperation) Parameters isPokeOperation bool Indicates if the operation is a poke (set) operation. Exceptions CommandException Thrown when row or column index is invalid or when value types are incorrect. ReduceRestrictionCounter() Reduces the restriction counter. This method can be overridden to implement specific logic. protected void ReduceRestrictionCounter() SetIntArray(int, int, int) Sets the integer value at the specified row and column in the integer array. public virtual void SetIntArray(int value, int row, int col) Parameters value int The integer value to set. row int The row index. col int The column index. Exceptions CommandException Thrown when the specified index is out of bounds. SetRealArray(double, int, int) Sets the real value at the specified row and column in the real array. public virtual void SetRealArray(double value, int row, int col) Parameters value double The real value to set. row int The row index. col int The column index. Exceptions CommandException Thrown when the specified index is out of bounds."
  },
  "api/ASE_Riya_Joshi_77356746.AppBoolean.html": {
    "href": "api/ASE_Riya_Joshi_77356746.AppBoolean.html",
    "title": "Class AppBoolean | ASE Project",
    "keywords": "Class AppBoolean Namespace ASE_Riya_Joshi_77356746 Assembly ASE_Riya_Joshi_77356746.dll Represents a boolean value in the application, inheriting from BOOSE.Boolean. This class may be extended in the future to implement specific restrictions or behaviors for boolean values. public class AppBoolean : Boolean, ICommand Inheritance object Command Evaluation Boolean AppBoolean Implements ICommand Inherited Members Boolean.Compile() Boolean.Execute() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Restrictions() Defines any restrictions on the boolean value. Currently, this method does not implement any restrictions. public override void Restrictions()"
  },
  "api/ASE_Riya_Joshi_77356746.AppCanvas.AppParser.html": {
    "href": "api/ASE_Riya_Joshi_77356746.AppCanvas.AppParser.html",
    "title": "Class AppParser | ASE Project",
    "keywords": "Class AppParser Namespace ASE_Riya_Joshi_77356746.AppCanvas Assembly ASE_Riya_Joshi_77356746.dll Represents a parser for processing commands and programs. This class implements the BOOSE.IParser interface and uses a command factory to create command objects based on parsed input. public class AppParser : IParser Inheritance object AppParser Implements IParser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppParser(CommandFactory, StoredProgram) Initializes a new instance of the AppParser class with the specified command factory and stored program. public AppParser(CommandFactory factory, StoredProgram program) Parameters factory CommandFactory The command factory to create command objects. program StoredProgram The stored program to associate with the parser. Methods ParseCommand(string) Parses a single command line and returns the corresponding command object. public virtual ICommand ParseCommand(string line) Parameters line string The command line to parse. Returns ICommand An BOOSE.ICommand object representing the parsed command, or null if the line is a comment. Exceptions ParserException Thrown when a variable does not exist or an unknown variable type is encountered. ParseProgram(string) Parses a program consisting of multiple lines of commands. public virtual void ParseProgram(string program) Parameters program string The program to parse as a string."
  },
  "api/ASE_Riya_Joshi_77356746.AppCanvas.AppPraser.html": {
    "href": "api/ASE_Riya_Joshi_77356746.AppCanvas.AppPraser.html",
    "title": "Class AppPraser | ASE Project",
    "keywords": "Class AppPraser Namespace ASE_Riya_Joshi_77356746.AppCanvas Assembly ASE_Riya_Joshi_77356746.dll Parses commands and programs for the drawing application. public class AppPraser : IParser Inheritance object AppPraser Implements IParser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppPraser() Initializes a new instance of the AppPraser class. public AppPraser() AppPraser(ICommandFactory, StoredProgram) Initializes a new instance of the AppPraser class with a command factory and stored program. public AppPraser(ICommandFactory commandFactory, StoredProgram storedProgram) Parameters commandFactory ICommandFactory The command factory to use for creating commands. storedProgram StoredProgram The stored program for managing commands and variables. Methods ParseCommand(string) Parses a single command from a line of text. public ICommand ParseCommand(string line) Parameters line string The line of text containing the command. Returns ICommand An instance of BOOSE.ICommand corresponding to the parsed command. Exceptions ParserException Thrown when there is an issue with the command parsing. ParseProgram(string) Parses a program consisting of multiple lines of commands. public void ParseProgram(string program) Parameters program string The program text containing multiple commands. Exceptions ArgumentException Thrown when the program text is null or empty. ParserException Thrown when a command parsing error occurs."
  },
  "api/ASE_Riya_Joshi_77356746.AppCanvas.MyAppCanvas.html": {
    "href": "api/ASE_Riya_Joshi_77356746.AppCanvas.MyAppCanvas.html",
    "title": "Class MyAppCanvas | ASE Project",
    "keywords": "Class MyAppCanvas Namespace ASE_Riya_Joshi_77356746.AppCanvas Assembly ASE_Riya_Joshi_77356746.dll Implementation of the BOOSE.ICanvas interface for performing drawing operations on a bitmap canvas. public class MyAppCanvas : ICanvas Inheritance object MyAppCanvas Implements ICanvas Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class provides methods for drawing various shapes (lines, circles, rectangles, triangles) and text on a canvas represented by a bitmap. It supports operations such as setting the pen color and size, moving the pen to a new position, and resetting the canvas to its initial state. The canvas is defined by a width (XSIDE) and height (YSIDE), which are used to constrain drawing operations within the canvas boundaries. The class utilizes the Graphics object to perform rendering on the canvas. Constructors MyAppCanvas() Initializes a new instance of the MyAppCanvas class with default canvas size. public MyAppCanvas() Remarks This constructor sets the canvas size to the default values defined by the constants XSIDE and YSIDE. It also initializes the pen size to 1 and sets the pen color to black (RGB: 0, 0, 0). Exceptions CanvasException Thrown if the canvas size cannot be set properly or if invalid values are provided for pen size or color. Properties Filled public bool Filled { get; set; } Property Value bool PenColour Gets or sets the pen color for the next drawing operation. public object PenColour { get; set; } Property Value object Remarks This property allows you to retrieve or modify the current pen color used for drawing operations. The color is represented as a Color object, and it determines the color of lines, shapes, and other drawn elements on the canvas. Exceptions InvalidCastException Thrown if the provided value for the pen color is not a valid Color object. PenSize Gets or sets the pen size, which determines the thickness of the lines drawn. public int PenSize { get; set; } Property Value int The pen size, which is a positive integer. It determines how thick the lines will appear on the canvas. A value greater than zero is required. If the value is zero or negative, an exception will be thrown. Exceptions CanvasException Thrown when the pen size is set to a value less than or equal to zero. XSIDE The width of the canvas. public int XSIDE { get; set; } Property Value int Remarks This defines the horizontal dimension of the canvas. It is used to validate the X positions during drawing operations. The default value is 640 pixels. Xpos Gets or sets the X position for the next drawing operation. public int Xpos { get; set; } Property Value int Remarks This property controls the X coordinate of the pen position, which determines the vertical position for subsequent drawing operations on the canvas. Exceptions CanvasException Thrown if the Y position is outside the allowed canvas boundaries (less than 0 or greater than the canvas height). YSIDE The height of the canvas. public int YSIDE { get; set; } Property Value int Remarks This defines the vertical dimension of the canvas. It is used to validate the Y positions during drawing operations. The default value is 480 pixels. Ypos Gets or sets the Y position for the next drawing operation. public int Ypos { get; set; } Property Value int Remarks This property controls the Y coordinate of the pen position, which determines the vertical position for subsequent drawing operations on the canvas. Exceptions CanvasException Thrown if the Y position is outside the allowed canvas boundaries (less than 0 or greater than the canvas height). Methods Circle(int, bool) Attempts to draw a circle at the current pen position, either filled or outlined, depending on the specified parameter. Ensures the radius is valid and checks if the circle fits within the canvas boundaries. If the radius is invalid or the circle exceeds the canvas size, a warning is logged, and drawing is skipped. public void Circle(int radius, bool filled) Parameters radius int The radius of the circle. Must be a positive integer greater than zero. If the radius is invalid, the circle will not be drawn, and a warning will be logged. filled bool A boolean indicating whether the circle should be filled or outlined: true: Draws a filled circle. false: Draws an outlined circle. Examples The following example demonstrates how to draw a filled circle with a radius of 50: Circle(50, true); Remarks The method ensures that drawing operations do not disrupt the program's flow. If the circle cannot be drawn due to invalid input or canvas boundary constraints, the method logs a warning and continues execution. Exceptions CanvasException This exception is caught internally to prevent program termination. It is used to log errors for invalid radius values or when the circle exceeds canvas dimensions. Clear() Clears the canvas by filling it with a default background color. public void Clear() DrawTo(int, int) Draws a line from the current pen position to a specified endpoint on the canvas. public void DrawTo(int x, int y) Parameters x int The X coordinate of the endpoint of the line. This value represents the position along the horizontal axis. y int The Y coordinate of the endpoint of the line. This value represents the position along the vertical axis. Examples The following example demonstrates how to draw a line from the current pen position to the point (100, 50): DrawTo(100, 50); Remarks The method updates the pen's current position to the specified endpoint after the line is drawn. Subsequent drawing operations will use the new position as the starting point. If the line cannot be drawn due to an uninitialized graphics context, the method logs a warning but does not interrupt execution. Exceptions CanvasException Thrown if the graphics context is not initialized or if the specified coordinates are outside the canvas boundaries. GetGraphics() Returns the current Graphics object used for drawing on the canvas. public Graphics GetGraphics() Returns Graphics The Graphics object associated with the current canvas. Examples The following example demonstrates how to retrieve the current Graphics object and handle any potential exceptions if the graphics object is not initialized: try { Graphics currentGraphics = GetGraphics(); // Use currentGraphics for drawing operations, if not null } catch (CanvasException ex) { Console.WriteLine($\"Error: {ex.Message}\"); // Handle the error (e.g., log it) } Remarks This method allows access to the internal Graphics object used for drawing on the canvas. If the graphics object has not been initialized (i.e., it is null), a BOOSE.CanvasException is thrown, indicating that the drawing cannot proceed. Exceptions CanvasException Thrown if the graphics object is not initialized or is null. This exception is thrown when there is an attempt to retrieve the Graphics object before it is set. MoveTo(int, int) Moves the drawing cursor to a specified position on the canvas without drawing any lines. public void MoveTo(int x, int y) Parameters x int The X coordinate to move the cursor to. Represents the horizontal position on the canvas. Must be within the canvas boundaries. y int The Y coordinate to move the cursor to. Represents the vertical position on the canvas. Must be within the canvas boundaries. Examples The following example demonstrates how to move the pen to position (50, 100) without drawing: MoveTo(50, 100); Remarks This method updates the current position of the pen to the specified coordinates (x, y) without performing any drawing operations. It ensures that subsequent drawing operations begin from the new cursor position. If the specified coordinates are outside the canvas boundaries, the position is not updated, and a warning is logged. Exceptions CanvasException Thrown if the specified coordinates are outside the canvas boundaries defined by XSIDE and YSIDE. Rect(int, int, bool) Draws a rectangle at the current cursor position with the specified dimensions and style (filled or outline). public void Rect(int width, int height, bool filled) Parameters width int The width of the rectangle. Must be a positive integer greater than zero. If the value is invalid, the rectangle will not be drawn, and a warning will be logged. height int The height of the rectangle. Must be a positive integer greater than zero. If the value is invalid, the rectangle will not be drawn, and a warning will be logged. filled bool A boolean indicating whether the rectangle should be filled or outlined: true: Draws a filled rectangle. false: Draws an outlined rectangle. Examples The following example demonstrates how to draw a filled rectangle with a width of 100 and height of 50: Rect(100, 50, true); Remarks The rectangle is drawn starting from the current cursor position (xPos, yPos). If the rectangle's dimensions are invalid or it exceeds the canvas boundaries, it will not be drawn, and a warning will be logged. This ensures the program continues execution without interruption. Exceptions CanvasException Thrown if the specified rectangle dimensions are invalid or if the rectangle exceeds canvas boundaries. Reset() Resets the canvas to its initial state by resetting the drawing cursor position to the top-left corner. public void Reset() Examples The following example demonstrates how to reset the canvas and start fresh with drawing: Reset(); // Resets the drawing cursor to the top-left corner Remarks This method resets the drawing cursor (pen position) to the initial position at (0, 0). Any previous drawing operations will not be affected, but the next drawing operations will begin from the top-left corner of the canvas. Exceptions CanvasException Thrown if there is an issue with resetting the canvas. For example, if the canvas is in an invalid state or has not been properly initialized, an exception could be thrown. Set(int, int) Sets the canvas size and initializes the drawing surface. public void Set(int xsize, int ysize) Parameters xsize int The width of the canvas, in pixels. ysize int The height of the canvas, in pixels. Remarks This method initializes the canvas with the specified width and height. It also sets the starting position of the drawing cursor (xPos, yPos) to the top-left corner (0, 0). After setting the canvas size, it creates a new Bitmap object for drawing and a corresponding Graphics object. Additionally, it clears the canvas to prepare for drawing. Exceptions CanvasException Thrown if the width or height of the canvas is invalid (e.g., negative or zero), or if there is an error during the initialization of the drawing surface. SetCanvas(Bitmap, Graphics) Sets the canvas by assigning the provided Bitmap and Graphics objects for drawing operations. public void SetCanvas(Bitmap newBitmap, Graphics newGraphics) Parameters newBitmap Bitmap The Bitmap object to be used as the canvas surface. This object holds the pixel data for the canvas. newGraphics Graphics The Graphics object to be used for rendering on the canvas. This object provides drawing capabilities like shapes, text, and images. Examples The following example demonstrates how to initialize a canvas with a 500x500 Bitmap: Bitmap bitmap = new Bitmap(500, 500); Graphics graphics = Graphics.FromImage(bitmap); SetCanvas(bitmap, graphics); Remarks This method initializes or reinitializes the internal canvas by setting the Bitmap and Graphics objects. After setting the canvas, it clears the drawing surface with a white background to provide a fresh start. If you need a specific background color, you can modify the method to accept a color parameter or change the default behavior. Exceptions CanvasException Thrown if either newBitmap or newGraphics is null. SetColour(int, int, int) Sets the pen color using specified RGB values. public void SetColour(int red, int green, int blue) Parameters red int The red component of the color, ranging from 0 to 255. green int The green component of the color, ranging from 0 to 255. blue int The blue component of the color, ranging from 0 to 255. Examples The following example demonstrates how to set the pen color to blue: SetColour(0, 0, 255); // Sets the pen color to pure blue Remarks This method allows precise control of the pen's color by specifying the intensity of red, green, and blue components. If an invalid value is provided, an exception is thrown. The pen is updated with the new color and retains the existing pen size. Exceptions CanvasException Thrown when any of the RGB components are outside the valid range of 0 to 255. Tri(int, int) Draws a triangle within the specified bounding rectangle, ensuring it fits within the canvas boundaries. public void Tri(int width, int height) Parameters width int The width of the bounding rectangle, which defines the base of the triangle. height int The height of the bounding rectangle, which defines the height of the triangle. Examples The following example demonstrates how to draw a triangle with width 100 and height 50: Tri(100, 50); // Draws a triangle with base 100 and height 50 Remarks The method validates the triangle's width and height to ensure they are positive. It then checks if the triangle's bounding points fit within the canvas boundaries. If any point exceeds the canvas size, a CanvasException is thrown. Exceptions CanvasException Thrown if the triangle dimensions are invalid, exceed canvas boundaries, or are non-positive. WriteText(string) Draws the specified text at the current cursor position on the canvas. public void WriteText(string text) Parameters text string The text to be drawn on the canvas. Examples The following example demonstrates how to draw text at the current position: WriteText(\"Hello, Canvas!\"); // Draws the text \"Hello, Canvas!\" at the current cursor position Remarks The method checks whether the input text is valid (not null, empty, or whitespace). If the text exceeds the canvas boundaries, a BOOSE.CanvasException is thrown. The method also ensures the graphics object is initialized before attempting to draw the text. Exceptions CanvasException Thrown if the text is null, empty, or exceeds canvas boundaries. It is also thrown if the graphics object is not initialized. getBitmap() Returns the Bitmap object representing the current drawing on the canvas. public object getBitmap() Returns object The Bitmap object associated with the current canvas. This object contains the pixel data for the current drawing and can be used to save or manipulate the canvas image. Remarks The Bitmap object returned by this method reflects the current state of the canvas, including any drawings made with the pen. If no drawing has been done, it will return an empty or unmodified bitmap. Exceptions CanvasException Thrown if the Bitmap object has not been initialized or there is an issue with accessing it."
  },
  "api/ASE_Riya_Joshi_77356746.AppCanvas.MyAppCommandFactory.html": {
    "href": "api/ASE_Riya_Joshi_77356746.AppCanvas.MyAppCommandFactory.html",
    "title": "Class MyAppCommandFactory | ASE Project",
    "keywords": "Class MyAppCommandFactory Namespace ASE_Riya_Joshi_77356746.AppCanvas Assembly ASE_Riya_Joshi_77356746.dll Factory class for creating command instances for the drawing application. public class MyAppCommandFactory : CommandFactory, ICommandFactory Inheritance object CommandFactory MyAppCommandFactory Implements ICommandFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MyAppCommandFactory() Initializes a new instance of the MyAppCommandFactory class. public MyAppCommandFactory() Methods MakeCommand(string) Creates a command based on the provided command string. public override ICommand MakeCommand(string command) Parameters command string The command string that specifies which command to create. Returns ICommand An instance of BOOSE.ICommand corresponding to the command string. Exceptions FactoryException Thrown when the command string is not valid."
  },
  "api/ASE_Riya_Joshi_77356746.AppCanvas.html": {
    "href": "api/ASE_Riya_Joshi_77356746.AppCanvas.html",
    "title": "Namespace ASE_Riya_Joshi_77356746.AppCanvas | ASE Project",
    "keywords": "Namespace ASE_Riya_Joshi_77356746.AppCanvas Classes AppParser Represents a parser for processing commands and programs. This class implements the BOOSE.IParser interface and uses a command factory to create command objects based on parsed input. MyAppCanvas Implementation of the BOOSE.ICanvas interface for performing drawing operations on a bitmap canvas. MyAppCommandFactory Factory class for creating command instances for the drawing application."
  },
  "api/ASE_Riya_Joshi_77356746.AppCast.html": {
    "href": "api/ASE_Riya_Joshi_77356746.AppCast.html",
    "title": "Class AppCast | ASE Project",
    "keywords": "Class AppCast Namespace ASE_Riya_Joshi_77356746 Assembly ASE_Riya_Joshi_77356746.dll Represents a cast command that converts a value from one type to another. This class inherits from BOOSE.Command and is specifically used to cast between AppInt and AppReal. public class AppCast : Command, ICommand Inheritance object Command AppCast Implements ICommand Inherited Members Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods CheckParameters(string[]) Checks the parameters provided for the cast command. Validates that exactly two parameters are provided. public override void CheckParameters(string[] parameter) Parameters parameter string[] The parameters to check. Exceptions CommandException Thrown when the number of parameters is not exactly two. Compile() Compiles the cast command by verifying the existence of source and target variables and checks if the cast operation is valid. public override void Compile() Exceptions CommandException Thrown when one or both variables do not exist or when attempting to cast from AppReal to AppInt. Execute() Executes the cast command by converting the value from the source integer variable to the target real variable. public override void Execute()"
  },
  "api/ASE_Riya_Joshi_77356746.AppCircle.html": {
    "href": "api/ASE_Riya_Joshi_77356746.AppCircle.html",
    "title": "Class AppCircle | ASE Project",
    "keywords": "Class AppCircle Namespace ASE_Riya_Joshi_77356746 Assembly ASE_Riya_Joshi_77356746.dll Represents the Circle command that draws a circle on the canvas. public class AppCircle : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter AppCircle Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppCircle() Initializes a new instance of the AppCircle class. public AppCircle() AppCircle(Canvas, int) Initializes a new instance of the AppCircle class with the specified canvas and radius. public AppCircle(Canvas canvas, int radius) Parameters canvas Canvas The canvas on which the circle will be drawn. radius int The radius of the circle. Methods CheckParameters(string[]) Validates the parameters for the circle command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters passed to the command. Exceptions CommandException Thrown when the parameter list is invalid. Execute() Executes the Circle command to draw a circle on the canvas. public override void Execute()"
  },
  "api/ASE_Riya_Joshi_77356746.AppConditionalCommand.html": {
    "href": "api/ASE_Riya_Joshi_77356746.AppConditionalCommand.html",
    "title": "Class AppConditionalCommand | ASE Project",
    "keywords": "Class AppConditionalCommand Namespace ASE_Riya_Joshi_77356746 Assembly ASE_Riya_Joshi_77356746.dll Represents a conditional command that extends the functionality of BOOSE.ConditionalCommand. Provides additional logic for resetting or decreasing internal counters. public class AppConditionalCommand : ConditionalCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppConditionalCommand Implements ICommand Derived ApplicationCompoundCommand Inherited Members ConditionalCommand.endLineNumber ConditionalCommand.Compile() ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Execute() Executes the conditional command and resets the count value to 0 by default. public override void Execute() ResetOrDecreaseCount(int) Resets or decreases a count value by modifying a non-public static field in the BOOSE.Boolean class. public void ResetOrDecreaseCount(int newValue) Parameters newValue int The new value to set for the field. Exceptions BOOSEException Thrown when the non-public field cannot be accessed or modified."
  },
  "api/ASE_Riya_Joshi_77356746.AppDrawTo.html": {
    "href": "api/ASE_Riya_Joshi_77356746.AppDrawTo.html",
    "title": "Class AppDrawTo | ASE Project",
    "keywords": "Class AppDrawTo Namespace ASE_Riya_Joshi_77356746 Assembly ASE_Riya_Joshi_77356746.dll Represents the DrawTo command that draws a line from the current position to the specified coordinates. public class AppDrawTo : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters AppDrawTo Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppDrawTo() Initializes a new instance of the AppDrawTo class. public AppDrawTo() AppDrawTo(Canvas, int, int) Initializes a new instance of the AppDrawTo class with the specified canvas and coordinates. public AppDrawTo(Canvas canvas, int x, int y) Parameters canvas Canvas The canvas on which the command will operate. x int The x-coordinate to draw to. y int The y-coordinate to draw to. Exceptions RestrictionException Thrown if the coordinates are negative. Methods CheckParameters(string[]) Validates the parameters for the DrawTo command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters to validate. Exceptions CommandException Thrown if the parameter list contains an incorrect number of parameters or invalid coordinates. Execute() Executes the DrawTo command to draw a line to the specified coordinates. public override void Execute() Exceptions RestrictionException Thrown if the coordinates are negative. IndexOutOfRangeException Thrown if the parameters array is out of bounds. Exception Thrown if an unexpected error occurs."
  },
  "api/ASE_Riya_Joshi_77356746.AppElse.html": {
    "href": "api/ASE_Riya_Joshi_77356746.AppElse.html",
    "title": "Class AppElse | ASE Project",
    "keywords": "Class AppElse Namespace ASE_Riya_Joshi_77356746 Assembly ASE_Riya_Joshi_77356746.dll Represents an \"else\" command in the application, inheriting from ApplicationCompoundCommand. This command is used in conditional constructs to provide alternative execution paths. public class AppElse : ApplicationCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppConditionalCommand ApplicationCompoundCommand AppElse Implements ICommand Inherited Members ApplicationCompoundCommand.CorrespondingCommand ApplicationCompoundCommand.ResetOrDecreaseCount(int) ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppElse() Initializes a new instance of the AppElse class. public AppElse() Properties CorrespondingEnd Gets or sets the corresponding end command for this \"else\" command. public AppEnd CorrespondingEnd { get; set; } Property Value AppEnd Methods CheckParameters(string[]) Validates the parameters for the \"else\" command. Ensures that exactly one parameter is provided and it matches the expected value \"else\". public override void CheckParameters(string[] parameters) Parameters parameters string[] The array of parameters to validate. Exceptions CommandException Thrown when the parameters are invalid or do not match the expected value. Compile() Compiles the \"else\" command by linking it to its corresponding conditional command and setting the line numbers for execution flow. public override void Compile() Execute() Executes the \"else\" command by determining the program counter based on the condition of the corresponding command. public override void Execute()"
  },
  "api/ASE_Riya_Joshi_77356746.AppEnd.html": {
    "href": "api/ASE_Riya_Joshi_77356746.AppEnd.html",
    "title": "Class AppEnd | ASE Project",
    "keywords": "Class AppEnd Namespace ASE_Riya_Joshi_77356746 Assembly ASE_Riya_Joshi_77356746.dll Represents an \"end\" command in the application, inheriting from ApplicationCompoundCommand. Handles the compilation and execution logic for ending various control flow constructs like \"if\", \"while\", and \"for\". public class AppEnd : ApplicationCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppConditionalCommand ApplicationCompoundCommand AppEnd Implements ICommand Inherited Members ApplicationCompoundCommand.CorrespondingCommand ApplicationCompoundCommand.CheckParameters(string[]) ApplicationCompoundCommand.ResetOrDecreaseCount(int) ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppEnd() Initializes a new instance of the AppEnd class. public AppEnd() Methods Compile() Compiles the \"end\" command by linking it to its corresponding starting command and validating syntax based on the command type. public override void Compile() Exceptions CommandException Thrown when the syntax does not match the expected format for the corresponding command type. Execute() Executes the \"end\" command by managing control flow for loops, conditionals, or methods. public override void Execute() Exceptions CommandException Thrown when a loop control variable does not exist or the loop step is invalid."
  },
  "api/ASE_Riya_Joshi_77356746.AppFor.html": {
    "href": "api/ASE_Riya_Joshi_77356746.AppFor.html",
    "title": "Class AppFor | ASE Project",
    "keywords": "Class AppFor Namespace ASE_Riya_Joshi_77356746 Assembly ASE_Riya_Joshi_77356746.dll public class AppFor : For, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand For AppFor Implements ICommand Inherited Members For.Compile() For.LoopControlV For.From For.To For.Step ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Execute() public override void Execute() ResetOrDecreaseCount(int) public void ResetOrDecreaseCount(int newValue) Parameters newValue int"
  },
  "api/ASE_Riya_Joshi_77356746.AppIf.html": {
    "href": "api/ASE_Riya_Joshi_77356746.AppIf.html",
    "title": "Class AppIf | ASE Project",
    "keywords": "Class AppIf Namespace ASE_Riya_Joshi_77356746 Assembly ASE_Riya_Joshi_77356746.dll Represents an application-specific \"if\" command, inheriting from ApplicationCompoundCommand. Provides functionality for managing restrictions specific to conditional \"if\" operations. public class AppIf : ApplicationCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppConditionalCommand ApplicationCompoundCommand AppIf Implements ICommand Inherited Members ApplicationCompoundCommand.CorrespondingCommand ApplicationCompoundCommand.CheckParameters(string[]) ApplicationCompoundCommand.Compile() ApplicationCompoundCommand.ResetOrDecreaseCount(int) AppConditionalCommand.Execute() ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppIf() Initializes a new instance of the AppIf class. public AppIf() Methods ReduceRestrictions() Reduces restrictions for the \"if\" operation. protected void ReduceRestrictions() Remarks This method can be extended to implement specific logic for relaxing constraints in \"if\" operations."
  },
  "api/ASE_Riya_Joshi_77356746.AppInt.html": {
    "href": "api/ASE_Riya_Joshi_77356746.AppInt.html",
    "title": "Class AppInt | ASE Project",
    "keywords": "Class AppInt Namespace ASE_Riya_Joshi_77356746 Assembly ASE_Riya_Joshi_77356746.dll Represents an application-specific implementation of the BOOSE.Int class. Provides functionality for defining and managing restrictions specific to integer operations. public class AppInt : Int, ICommand Inheritance object Command Evaluation Int AppInt Implements ICommand Inherited Members Int.Compile() Int.Execute() Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Restrictions() Overrides the BOOSE.Int.Restrictions() method to define specific restriction logic. public override void Restrictions()"
  },
  "api/ASE_Riya_Joshi_77356746.AppMoveTo.html": {
    "href": "api/ASE_Riya_Joshi_77356746.AppMoveTo.html",
    "title": "Class AppMoveTo | ASE Project",
    "keywords": "Class AppMoveTo Namespace ASE_Riya_Joshi_77356746 Assembly ASE_Riya_Joshi_77356746.dll Represents a command to move the pen to a specified position on the canvas. public class AppMoveTo : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters AppMoveTo Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppMoveTo() Initializes a new instance of the AppMoveTo class. public AppMoveTo() AppMoveTo(Canvas, int, int) Initializes a new instance of the AppMoveTo class with the specified canvas and coordinates. public AppMoveTo(Canvas canvas, int x, int y) Parameters canvas Canvas The canvas on which the move-to operation will be performed. x int The x-coordinate of the position to move to (must not exceed 2000). y int The y-coordinate of the position to move to (must not exceed 2000). Exceptions RestrictionException Thrown if either coordinate exceeds 2000. Methods CheckParameters(string[]) Validates the parameters for the move-to command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of parameters representing the x and y coordinates. Exceptions CommandException Thrown if the number of parameters is incorrect or if the coordinates are invalid (negative or non-integer values). Exception Thrown for any unexpected errors during validation. Execute() Executes the command to move the pen to the specified position on the canvas. public override void Execute() Exceptions IndexOutOfRangeException Thrown if the parameter indices are invalid. RestrictionException Thrown if either coordinate exceeds 2000. Exception Thrown for any unexpected errors during execution."
  },
  "api/ASE_Riya_Joshi_77356746.AppPeek.html": {
    "href": "api/ASE_Riya_Joshi_77356746.AppPeek.html",
    "title": "Class AppPeek | ASE Project",
    "keywords": "Class AppPeek Namespace ASE_Riya_Joshi_77356746 Assembly ASE_Riya_Joshi_77356746.dll Represents a Peek operation, inheriting from AppArray. Provides functionality for parameter validation, compilation, and execution specific to the Peek operation. public class AppPeek : AppArray, ICommand Inheritance object Command Evaluation AppArray AppPeek Implements ICommand Inherited Members AppArray.PEEK AppArray.POKE AppArray.type AppArray.IntValue AppArray.RealValue AppArray.rowsCount AppArray.columnsCount AppArray.intArray AppArray.realArray AppArray.pokeValue AppArray.peekValue AppArray.rowExpression AppArray.columnExpression AppArray.rowCurrent AppArray.columnCurrent AppArray.Rows AppArray.Columns AppArray.ArrayRestrictions() AppArray.ReduceRestrictionCounter() AppArray.ProcessArrayParametersCompile(bool) AppArray.ProcessArrayParametersExecute(bool) AppArray.SetIntArray(int, int, int) AppArray.SetRealArray(double, int, int) AppArray.GetIntArray(int, int) AppArray.GetRealArray(int, int) Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppPeek() Initializes a new instance of the AppPeek class. public AppPeek() Methods CheckParameters(string[]) Validates the provided parameters for the Peek operation. public override void CheckParameters(string[] parameters) Parameters parameters string[] The array of parameters to validate. Exceptions NotImplementedException Thrown to indicate that parameter validation for the Peek operation is not yet implemented. Compile() Compiles the Peek operation, processing array parameters as required. public override void Compile() Execute() Executes the Peek operation, retrieving and updating variables based on the array type. public override void Execute() Exceptions CommandException Thrown when an unsupported array type is encountered during the Peek operation."
  },
  "api/ASE_Riya_Joshi_77356746.AppPoke.html": {
    "href": "api/ASE_Riya_Joshi_77356746.AppPoke.html",
    "title": "Class AppPoke | ASE Project",
    "keywords": "Class AppPoke Namespace ASE_Riya_Joshi_77356746 Assembly ASE_Riya_Joshi_77356746.dll Represents a Poke operation, inheriting from AppArray. Provides functionality for parameter validation, compilation, execution, and setting stored programs. public class AppPoke : AppArray, ICommand Inheritance object Command Evaluation AppArray AppPoke Implements ICommand Inherited Members AppArray.PEEK AppArray.POKE AppArray.type AppArray.IntValue AppArray.RealValue AppArray.rowsCount AppArray.columnsCount AppArray.intArray AppArray.realArray AppArray.pokeValue AppArray.peekValue AppArray.rowExpression AppArray.columnExpression AppArray.rowCurrent AppArray.columnCurrent AppArray.Rows AppArray.Columns AppArray.ArrayRestrictions() AppArray.ReduceRestrictionCounter() AppArray.ProcessArrayParametersCompile(bool) AppArray.ProcessArrayParametersExecute(bool) AppArray.SetIntArray(int, int, int) AppArray.SetRealArray(double, int, int) AppArray.GetIntArray(int, int) AppArray.GetRealArray(int, int) Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppPoke() Initializes a new instance of the AppPoke class. public AppPoke() Methods CheckParameters(string[]) Validates the provided parameters for the Poke operation. public override void CheckParameters(string[] parameter) Parameters parameter string[] The array of parameters to validate. Exceptions CommandException Thrown when the number of parameters is invalid for the Poke operation. Compile() Compiles the Poke operation, processing array parameters as required. public override void Compile() Execute() Executes the Poke operation, processing array parameters as required. public override void Execute() Set(StoredProgram, string) Sets the parameters for the Poke operation within a specified stored program. public override void Set(StoredProgram program, string paramsList) Parameters program StoredProgram The stored program to associate with the Poke operation. paramsList string The list of parameters to set for the program."
  },
  "api/ASE_Riya_Joshi_77356746.AppReal.html": {
    "href": "api/ASE_Riya_Joshi_77356746.AppReal.html",
    "title": "Class AppReal | ASE Project",
    "keywords": "Class AppReal Namespace ASE_Riya_Joshi_77356746 Assembly ASE_Riya_Joshi_77356746.dll Represents a real implementation of the BOOSE.Real class. public class AppReal : Real, ICommand Inheritance object Command Evaluation Real AppReal Implements ICommand Inherited Members Real.Compile() Real.Execute() Real.Value Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Restrictions() Overrides the BOOSE.Real.Restrictions() method to define specific restriction logic. public override void Restrictions()"
  },
  "api/ASE_Riya_Joshi_77356746.AppWhile.html": {
    "href": "api/ASE_Riya_Joshi_77356746.AppWhile.html",
    "title": "Class AppWhile | ASE Project",
    "keywords": "Class AppWhile Namespace ASE_Riya_Joshi_77356746 Assembly ASE_Riya_Joshi_77356746.dll Represents an application-specific compound command with customizable functionality. public class AppWhile : ApplicationCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppConditionalCommand ApplicationCompoundCommand AppWhile Implements ICommand Inherited Members ApplicationCompoundCommand.CorrespondingCommand ApplicationCompoundCommand.CheckParameters(string[]) ApplicationCompoundCommand.Compile() ApplicationCompoundCommand.ResetOrDecreaseCount(int) AppConditionalCommand.Execute() ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppWhile() Initializes a new instance of the AppWhile class. public AppWhile() Methods ReduceRestrictions() Reduces restrictions for the current application context. protected void ReduceRestrictions() Remarks This method can be overridden or extended to implement specific logic for relaxing constraints."
  },
  "api/ASE_Riya_Joshi_77356746.ApplicationCompoundCommand.html": {
    "href": "api/ASE_Riya_Joshi_77356746.ApplicationCompoundCommand.html",
    "title": "Class ApplicationCompoundCommand | ASE Project",
    "keywords": "Class ApplicationCompoundCommand Namespace ASE_Riya_Joshi_77356746 Assembly ASE_Riya_Joshi_77356746.dll Represents a compound command in the application, inheriting from AppConditionalCommand. Provides functionality for managing corresponding commands and validating parameters. public class ApplicationCompoundCommand : AppConditionalCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppConditionalCommand ApplicationCompoundCommand Implements ICommand Derived AppElse AppEnd AppIf AppWhile Inherited Members AppConditionalCommand.Execute() ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationCompoundCommand() Initializes a new instance of the ApplicationCompoundCommand class. Resets or decreases the count to 0 by default. public ApplicationCompoundCommand() Properties CorrespondingCommand Gets or sets the corresponding conditional command. public ConditionalCommand CorrespondingCommand { get; set; } Property Value ConditionalCommand Methods CheckParameters(string[]) Validates the parameters for the compound command. Ensures exactly one parameter is provided and it contains an expected \"end\" marker. public override void CheckParameters(string[] parameters) Parameters parameters string[] The array of parameters to validate. Exceptions CommandException Thrown when the number of parameters is incorrect or the parameter content is invalid. Compile() Compiles the compound command. public override void Compile() ResetOrDecreaseCount(int) Resets or decreases a count value by modifying a non-public static field in the BOOSE.Boolean class. public void ResetOrDecreaseCount(int newValue) Parameters newValue int The new value to set for the field. Exceptions BOOSEException Thrown when the non-public field cannot be accessed or modified."
  },
  "api/ASE_Riya_Joshi_77356746.Circle.html": {
    "href": "api/ASE_Riya_Joshi_77356746.Circle.html",
    "title": "Class Circle | ASE Project",
    "keywords": "Class Circle Namespace ASE_Riya_Joshi_77356746 Assembly ASE_Riya_Joshi_77356746.dll Represents the Circle command that draws a circle on the canvas. public class Circle : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter Circle Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Circle() Initializes a new instance of the Circle class. public Circle() Circle(Canvas, int) Initializes a new instance of the Circle class with the specified canvas and radius. public Circle(Canvas canvas, int radius) Parameters canvas Canvas The canvas on which the circle will be drawn. radius int The radius of the circle. Methods CheckParameters(string[]) Validates the parameters for the circle command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters passed to the command. Exceptions CommandException Thrown when the parameter list is invalid. Execute() Executes the Circle command to draw a circle on the canvas. public override void Execute()"
  },
  "api/ASE_Riya_Joshi_77356746.Clear.html": {
    "href": "api/ASE_Riya_Joshi_77356746.Clear.html",
    "title": "Class Clear | ASE Project",
    "keywords": "Class Clear Namespace ASE_Riya_Joshi_77356746 Assembly ASE_Riya_Joshi_77356746.dll Represents the Clear command that clears the canvas. public class Clear : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter Clear Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Clear() Initializes a new instance of the Clear class. public Clear() Clear(Canvas) Initializes a new instance of the Clear class with the specified canvas. public Clear(Canvas c) Parameters c Canvas The canvas on which the command will operate. Methods CheckParameters(string[]) Validates the parameters for the Clear command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters to validate. Remarks No validation needed as there are no parameters for this command. Execute() Executes the Clear command to clear the canvas. public override void Execute()"
  },
  "api/ASE_Riya_Joshi_77356746.DrawTo.html": {
    "href": "api/ASE_Riya_Joshi_77356746.DrawTo.html",
    "title": "Class DrawTo | ASE Project",
    "keywords": "Class DrawTo Namespace ASE_Riya_Joshi_77356746 Assembly ASE_Riya_Joshi_77356746.dll Represents the DrawTo command that draws a line from the current position to the specified coordinates. public class DrawTo : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters DrawTo Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors DrawTo() Initializes a new instance of the DrawTo class. public DrawTo() DrawTo(Canvas, int, int) Initializes a new instance of the DrawTo class with the specified canvas and coordinates. public DrawTo(Canvas canvas, int x, int y) Parameters canvas Canvas The canvas on which the command will operate. x int The x-coordinate to draw to. y int The y-coordinate to draw to. Exceptions RestrictionException Thrown if the coordinates are negative. Methods CheckParameters(string[]) Validates the parameters for the DrawTo command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters to validate. Exceptions CommandException Thrown if the parameter list contains an incorrect number of parameters or invalid coordinates. Execute() Executes the DrawTo command to draw a line to the specified coordinates. public override void Execute() Exceptions RestrictionException Thrown if the coordinates are negative. IndexOutOfRangeException Thrown if the parameters array is out of bounds. Exception Thrown if an unexpected error occurs."
  },
  "api/ASE_Riya_Joshi_77356746.Fill.html": {
    "href": "api/ASE_Riya_Joshi_77356746.Fill.html",
    "title": "Class Fill | ASE Project",
    "keywords": "Class Fill Namespace ASE_Riya_Joshi_77356746 Assembly ASE_Riya_Joshi_77356746.dll Represents the Fill command that sets the filled state for shapes on the canvas. public class Fill : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter Fill Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Fill() Initializes a new instance of the Fill class. public Fill() Fill(Canvas, string) Initializes a new instance of the Fill class with the specified canvas and text. public Fill(Canvas c, string text) Parameters c Canvas The canvas on which the command will operate. text string The text parameter to set the fill state. Exceptions ArgumentNullException Thrown when text is null. Methods CheckParameters(string[]) Validates the parameters for the Fill command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters to validate. Exceptions CommandException Thrown if the parameter list is null, contains an incorrect number of parameters, or if the text parameter is invalid. Execute() Executes the Fill command to set the filled state based on the provided parameter. public override void Execute() Exceptions RestrictionException Thrown if the text parameter is null, empty, whitespace, or exceeds the allowed length. SetFilled(string) Sets the filled state of the shape based on the provided string value. public void SetFilled(string isFilledStr) Parameters isFilledStr string A string value (\"true\" or \"false\") to set whether the shape is filled. Exceptions CommandException Thrown if the string value is not \"true\" or \"false\"."
  },
  "api/ASE_Riya_Joshi_77356746.Form1.html": {
    "href": "api/ASE_Riya_Joshi_77356746.Form1.html",
    "title": "Class Form1 | ASE Project",
    "keywords": "Class Form1 Namespace ASE_Riya_Joshi_77356746 Assembly ASE_Riya_Joshi_77356746.dll public class Form1 : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form Form1 Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members Form.SetVisibleCore(bool) Form.Activate() Form.ActivateMdiChild(Form) Form.AddOwnedForm(Form) Form.AdjustFormScrollbars(bool) Form.Close() Form.CreateAccessibilityInstance() Form.CreateControlsInstance() Form.CreateHandle() Form.DefWndProc(ref Message) Form.ProcessMnemonic(char) Form.CenterToParent() Form.CenterToScreen() Form.LayoutMdi(MdiLayout) Form.OnActivated(EventArgs) Form.OnBackgroundImageChanged(EventArgs) Form.OnBackgroundImageLayoutChanged(EventArgs) Form.OnClosing(CancelEventArgs) Form.OnClosed(EventArgs) Form.OnFormClosing(FormClosingEventArgs) Form.OnFormClosed(FormClosedEventArgs) Form.OnCreateControl() Form.OnDeactivate(EventArgs) Form.OnEnabledChanged(EventArgs) Form.OnEnter(EventArgs) Form.OnFontChanged(EventArgs) Form.OnGotFocus(EventArgs) Form.OnHandleCreated(EventArgs) Form.OnHandleDestroyed(EventArgs) Form.OnHelpButtonClicked(CancelEventArgs) Form.OnLayout(LayoutEventArgs) Form.OnLoad(EventArgs) Form.OnMaximizedBoundsChanged(EventArgs) Form.OnMaximumSizeChanged(EventArgs) Form.OnMinimumSizeChanged(EventArgs) Form.OnInputLanguageChanged(InputLanguageChangedEventArgs) Form.OnInputLanguageChanging(InputLanguageChangingEventArgs) Form.OnVisibleChanged(EventArgs) Form.OnMdiChildActivate(EventArgs) Form.OnMenuStart(EventArgs) Form.OnMenuComplete(EventArgs) Form.OnPaint(PaintEventArgs) Form.OnResize(EventArgs) Form.OnDpiChanged(DpiChangedEventArgs) Form.OnGetDpiScaledSize(int, int, ref Size) Form.OnRightToLeftLayoutChanged(EventArgs) Form.OnShown(EventArgs) Form.OnTextChanged(EventArgs) Form.ProcessCmdKey(ref Message, Keys) Form.ProcessDialogKey(Keys) Form.ProcessDialogChar(char) Form.ProcessKeyPreview(ref Message) Form.ProcessTabKey(bool) Form.RemoveOwnedForm(Form) Form.Select(bool, bool) Form.ScaleMinMaxSize(float, float, bool) Form.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Form.ScaleControl(SizeF, BoundsSpecified) Form.SetBoundsCore(int, int, int, int, BoundsSpecified) Form.SetClientSizeCore(int, int) Form.SetDesktopBounds(int, int, int, int) Form.SetDesktopLocation(int, int) Form.Show(IWin32Window) Form.ShowDialog() Form.ShowDialog(IWin32Window) Form.ToString() Form.UpdateDefaultButton() Form.OnResizeBegin(EventArgs) Form.OnResizeEnd(EventArgs) Form.OnStyleChanged(EventArgs) Form.ValidateChildren() Form.ValidateChildren(ValidationConstraints) Form.WndProc(ref Message) Form.AcceptButton Form.ActiveForm Form.ActiveMdiChild Form.AllowTransparency Form.AutoScroll Form.AutoSize Form.AutoSizeMode Form.AutoValidate Form.BackColor Form.FormBorderStyle Form.CancelButton Form.ClientSize Form.ControlBox Form.CreateParams Form.DefaultImeMode Form.DefaultSize Form.DesktopBounds Form.DesktopLocation Form.DialogResult Form.HelpButton Form.Icon Form.IsMdiChild Form.IsMdiContainer Form.IsRestrictedWindow Form.KeyPreview Form.Location Form.MaximizedBounds Form.MaximumSize Form.MainMenuStrip Form.MinimumSize Form.MaximizeBox Form.MdiChildren Form.MdiChildrenMinimizedAnchorBottom Form.MdiParent Form.MinimizeBox Form.Modal Form.Opacity Form.OwnedForms Form.Owner Form.RestoreBounds Form.RightToLeftLayout Form.ShowInTaskbar Form.ShowIcon Form.ShowWithoutActivation Form.Size Form.SizeGripStyle Form.StartPosition Form.Text Form.TopLevel Form.TopMost Form.TransparencyKey Form.WindowState Form.AutoSizeChanged Form.AutoValidateChanged Form.HelpButtonClicked Form.MaximizedBoundsChanged Form.MaximumSizeChanged Form.MinimumSizeChanged Form.Activated Form.Deactivate Form.FormClosing Form.FormClosed Form.Load Form.MdiChildActivate Form.MenuComplete Form.MenuStart Form.InputLanguageChanged Form.InputLanguageChanging Form.RightToLeftLayoutChanged Form.Shown Form.DpiChanged Form.ResizeBegin Form.ResizeEnd ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnMove(EventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.RescaleConstantsForDpi(int, int) ContainerControl.Validate() ContainerControl.Validate(bool) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(int) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(int, int) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(int, int) ScrollableControl.SetScrollState(int, bool) ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(int) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, int) Control.AccessibilityNotifyClients(AccessibleEvents, int, int) Control.BeginInvoke(Delegate) Control.BeginInvoke(Action) Control.BeginInvoke(Delegate, params object[]) Control.BringToFront() Control.Contains(Control) Control.CreateGraphics() Control.CreateControl() Control.DestroyHandle() Control.DoDragDrop(object, DragDropEffects) Control.DoDragDrop(object, DragDropEffects, Bitmap, Point, bool) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(object, KeyEventArgs) Control.RaiseMouseEvent(object, MouseEventArgs) Control.Focus() Control.FromChildHandle(nint) Control.FromHandle(nint) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, bool) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, bool) Control.Invalidate() Control.Invalidate(bool) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, bool) Control.Invoke(Action) Control.Invoke(Delegate) Control.Invoke(Delegate, params object[]) Control.Invoke<T>(Func<T>) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(char) Control.IsInputKey(Keys) Control.IsMnemonic(char, string) Control.LogicalToDeviceUnits(int) Control.LogicalToDeviceUnits(Size) Control.ScaleBitmapLogicalToDevice(ref Bitmap) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDataContextChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentDataContextChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseDown(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnDpiChangedBeforeParent(EventArgs) Control.OnDpiChangedAfterParent(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, string) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(ref Message) Control.PreProcessControlMessage(ref Message) Control.ProcessKeyEventArgs(ref Message) Control.ProcessKeyMessage(ref Message) Control.RaiseDragEvent(object, DragEventArgs) Control.RaisePaintEvent(object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(nint, ref Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(bool) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, bool, bool, bool, bool) Control.SendToBack() Control.SetBounds(int, int, int, int) Control.SetBounds(int, int, int, int, BoundsSpecified) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, bool) Control.SetTopLevel(bool) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(int, int, int, int) Control.UpdateBounds(int, int, int, int, int, int) Control.UpdateZOrder() Control.UpdateStyles() Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.DataContext Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.CompanyName Control.ContainsFocus Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DeviceDpi Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsAncestorSiteInDesignMode Control.IsMirrored Control.Left Control.Margin Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.RenderRightToLeft Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DataContextChanged Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.DpiChangedBeforeParent Control.DpiChangedAfterParent Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Container Component.DesignMode Component.Events Component.Disposed MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Form1() public Form1() Methods Dispose(bool) Clean up any resources being used. protected override void Dispose(bool disposing) Parameters disposing bool true if managed resources should be disposed; otherwise, false."
  },
  "api/ASE_Riya_Joshi_77356746.GloabalConfig.html": {
    "href": "api/ASE_Riya_Joshi_77356746.GloabalConfig.html",
    "title": "Class GloabalConfig | ASE Project",
    "keywords": "Class GloabalConfig Namespace ASE_Riya_Joshi_77356746 Assembly ASE_Riya_Joshi_77356746.dll Represents a global configuration class that maintains the application's global state. public class GloabalConfig Inheritance object GloabalConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsFillEnabled Gets or sets the filled status, which determines whether shapes should be filled or not. public static bool IsFillEnabled { get; set; } Property Value bool A boolean value indicating the filled status. The default value is false. MaxX public static int MaxX { get; set; } Property Value int MaxY public static int MaxY { get; set; } Property Value int PenSize public static int PenSize { get; set; } Property Value int"
  },
  "api/ASE_Riya_Joshi_77356746.MoveTo.html": {
    "href": "api/ASE_Riya_Joshi_77356746.MoveTo.html",
    "title": "Class MoveTo | ASE Project",
    "keywords": "Class MoveTo Namespace ASE_Riya_Joshi_77356746 Assembly ASE_Riya_Joshi_77356746.dll Represents a command to move the pen to a specified position on the canvas. public class MoveTo : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters MoveTo Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MoveTo() Initializes a new instance of the MoveTo class. public MoveTo() MoveTo(Canvas, int, int) Initializes a new instance of the MoveTo class with the specified canvas and coordinates. public MoveTo(Canvas canvas, int x, int y) Parameters canvas Canvas The canvas on which the move-to operation will be performed. x int The x-coordinate of the position to move to (must not exceed 2000). y int The y-coordinate of the position to move to (must not exceed 2000). Exceptions RestrictionException Thrown if either coordinate exceeds 2000. Methods CheckParameters(string[]) Validates the parameters for the move-to command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of parameters representing the x and y coordinates. Exceptions CommandException Thrown if the number of parameters is incorrect or if the coordinates are invalid (negative or non-integer values). Exception Thrown for any unexpected errors during validation. Execute() Executes the command to move the pen to the specified position on the canvas. public override void Execute() Exceptions IndexOutOfRangeException Thrown if the parameter indices are invalid. RestrictionException Thrown if either coordinate exceeds 2000. Exception Thrown for any unexpected errors during execution."
  },
  "api/ASE_Riya_Joshi_77356746.MyFill.html": {
    "href": "api/ASE_Riya_Joshi_77356746.MyFill.html",
    "title": "Class MyFill | ASE Project",
    "keywords": "Class MyFill Namespace ASE_Riya_Joshi_77356746 Assembly ASE_Riya_Joshi_77356746.dll Represents the Fill command that sets the filled state for shapes on the canvas. public class MyFill : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter MyFill Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MyFill() Initializes a new instance of the MyFill class. public MyFill() MyFill(Canvas, string) Initializes a new instance of the MyFill class with the specified canvas and text. public MyFill(Canvas c, string text) Parameters c Canvas The canvas on which the command will operate. text string The text parameter to set the fill state. Exceptions ArgumentNullException Thrown when text is null. Methods CheckParameters(string[]) Validates the parameters for the Fill command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters to validate. Exceptions CommandException Thrown if the parameter list is null, contains an incorrect number of parameters, or if the text parameter is invalid. Execute() Executes the Fill command to set the filled state based on the provided parameter. public override void Execute() Exceptions RestrictionException Thrown if the text parameter is null, empty, whitespace, or exceeds the allowed length. SetFilled(string) Sets the filled state of the shape based on the provided string value. public void SetFilled(string isFilledStr) Parameters isFilledStr string A string value (\"true\" or \"false\") to set whether the shape is filled. Exceptions CommandException Thrown if the string value is not \"true\" or \"false\"."
  },
  "api/ASE_Riya_Joshi_77356746.MyMethod.html": {
    "href": "api/ASE_Riya_Joshi_77356746.MyMethod.html",
    "title": "Class MyMethod | ASE Project",
    "keywords": "Class MyMethod Namespace ASE_Riya_Joshi_77356746 Assembly ASE_Riya_Joshi_77356746.dll Represents a custom method that extends the functionality of the base Method class. This class provides methods to reset or decrease restriction and method counts. public class MyMethod : Method, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand CompoundCommand Method MyMethod Implements ICommand Inherited Members Method.CheckParameters(string[]) Method.Compile() Method.Execute() Method.LocalVariables Method.MethodName Method.Type CompoundCommand.ReduceRestrictions() CompoundCommand.CorrespondingCommand ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MyMethod() Initializes a new instance of the MyMethod class. This constructor reduces restrictions and resets counts to zero. public MyMethod() Methods ResetOrDecreaseCount(int) Resets or decreases the restriction count to the specified value. public void ResetOrDecreaseCount(int newValue) Parameters newValue int The new value to set for the restriction count. Exceptions BOOSEException Thrown when the private field '뇀' in the Boolean class cannot be accessed. ResetOrDecreaseMethodCount(int) Resets or decreases the method count to the specified value. public void ResetOrDecreaseMethodCount(int newValue) Parameters newValue int The new value to set for the method count. Exceptions BOOSEException Thrown when the private field '뇔' in the Method class cannot be accessed."
  },
  "api/ASE_Riya_Joshi_77356746.MyPenColour.html": {
    "href": "api/ASE_Riya_Joshi_77356746.MyPenColour.html",
    "title": "Class MyPenColour | ASE Project",
    "keywords": "Class MyPenColour Namespace ASE_Riya_Joshi_77356746 Assembly ASE_Riya_Joshi_77356746.dll Represents a command to set the pen color on the canvas using RGB values. public class MyPenColour : CommandThreeParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters CommandThreeParameters MyPenColour Implements ICommand Inherited Members CommandThreeParameters.param3 CommandThreeParameters.param3unprocessed CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MyPenColour() Initializes a new instance of the MyPenColour class. public MyPenColour() MyPenColour(Canvas, int, int, int) Initializes a new instance of the MyPenColour class with the specified canvas and RGB values. public MyPenColour(Canvas canvas, int r, int g, int b) Parameters canvas Canvas The canvas on which the pen color will be set. r int The red component of the color (0-255). g int The green component of the color (0-255). b int The blue component of the color (0-255). Methods CheckParameters(string[]) Validates the parameters for the pen color command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of parameters representing the RGB components. Exceptions CommandException Thrown if the number of parameters is incorrect or if the RGB values are invalid (non-integers or out of range). Exception Thrown for any unexpected errors during validation. Execute() Executes the command to set the pen color on the canvas. public override void Execute() Exceptions RestrictionException Thrown if any RGB component is outside the range 0-255. IndexOutOfRangeException Thrown if the parameter indices are invalid. Exception Thrown for any unexpected errors during execution."
  },
  "api/ASE_Riya_Joshi_77356746.MyPenSize.html": {
    "href": "api/ASE_Riya_Joshi_77356746.MyPenSize.html",
    "title": "Class MyPenSize | ASE Project",
    "keywords": "Class MyPenSize Namespace ASE_Riya_Joshi_77356746 Assembly ASE_Riya_Joshi_77356746.dll public class MyPenSize : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter MyPenSize Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MyPenSize() public MyPenSize() MyPenSize(Canvas, int) public MyPenSize(Canvas c, int pensize) Parameters c Canvas pensize int Methods CheckParameters(string[]) public override void CheckParameters(string[] parameterList) Parameters parameterList string[] Execute() public override void Execute() SetPenSize(int) public void SetPenSize(int penSize) Parameters penSize int"
  },
  "api/ASE_Riya_Joshi_77356746.MyRectangle.html": {
    "href": "api/ASE_Riya_Joshi_77356746.MyRectangle.html",
    "title": "Class MyRectangle | ASE Project",
    "keywords": "Class MyRectangle Namespace ASE_Riya_Joshi_77356746 Assembly ASE_Riya_Joshi_77356746.dll Represents a command to draw a rectangle on the canvas. public class MyRectangle : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters MyRectangle Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MyRectangle() Initializes a new instance of the MyRectangle class. public MyRectangle() MyRectangle(Canvas, int, int) Initializes a new instance of the MyRectangle class with the specified canvas, width, and height. public MyRectangle(Canvas canvas, int width, int height) Parameters canvas Canvas The canvas on which the rectangle will be drawn. width int The width of the rectangle. height int The height of the rectangle. Methods CheckParameters(string[]) Validates the parameters for the rectangle command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of parameters representing the width and height. Exceptions CommandException Thrown if the number of parameters is incorrect or if the dimensions are invalid (non-positive or not integers). Exception Thrown for any unexpected errors during validation. Execute() Executes the command to draw a rectangle on the canvas. public override void Execute() Exceptions RestrictionException Thrown if the width or height exceeds 2000. IndexOutOfRangeException Thrown if the parameter indices are invalid. Exception Thrown for any unexpected errors during execution."
  },
  "api/ASE_Riya_Joshi_77356746.MyStoredProgram.html": {
    "href": "api/ASE_Riya_Joshi_77356746.MyStoredProgram.html",
    "title": "Class MyStoredProgram | ASE Project",
    "keywords": "Class MyStoredProgram Namespace ASE_Riya_Joshi_77356746 Assembly ASE_Riya_Joshi_77356746.dll Represents a stored program that can manage variables, methods, and command execution. This class extends the functionality of the base BOOSE.StoredProgram class. public class MyStoredProgram : StoredProgram, IList, ICollection, IEnumerable, ICloneable, IStoredProgram Inheritance object ArrayList StoredProgram MyStoredProgram Implements IList ICollection IEnumerable ICloneable IStoredProgram Inherited Members StoredProgram.FindVariable(Evaluation) ArrayList.Adapter(IList) ArrayList.Add(object) ArrayList.AddRange(ICollection) ArrayList.BinarySearch(int, int, object, IComparer) ArrayList.BinarySearch(object) ArrayList.BinarySearch(object, IComparer) ArrayList.Clear() ArrayList.Clone() ArrayList.Contains(object) ArrayList.CopyTo(Array) ArrayList.CopyTo(Array, int) ArrayList.CopyTo(int, Array, int, int) ArrayList.FixedSize(ArrayList) ArrayList.FixedSize(IList) ArrayList.GetEnumerator() ArrayList.GetEnumerator(int, int) ArrayList.GetRange(int, int) ArrayList.IndexOf(object) ArrayList.IndexOf(object, int) ArrayList.IndexOf(object, int, int) ArrayList.Insert(int, object) ArrayList.InsertRange(int, ICollection) ArrayList.LastIndexOf(object) ArrayList.LastIndexOf(object, int) ArrayList.LastIndexOf(object, int, int) ArrayList.ReadOnly(ArrayList) ArrayList.ReadOnly(IList) ArrayList.Remove(object) ArrayList.RemoveAt(int) ArrayList.RemoveRange(int, int) ArrayList.Repeat(object, int) ArrayList.Reverse() ArrayList.Reverse(int, int) ArrayList.SetRange(int, ICollection) ArrayList.Sort() ArrayList.Sort(IComparer) ArrayList.Sort(int, int, IComparer) ArrayList.Synchronized(ArrayList) ArrayList.Synchronized(IList) ArrayList.ToArray() ArrayList.ToArray(Type) ArrayList.TrimToSize() ArrayList.Capacity ArrayList.Count ArrayList.IsFixedSize ArrayList.IsReadOnly ArrayList.IsSynchronized ArrayList.this[int] ArrayList.SyncRoot object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MyStoredProgram(ICanvas) Initializes a new instance of the MyStoredProgram class with the specified canvas. public MyStoredProgram(ICanvas _canvas) Parameters _canvas ICanvas The canvas to associate with this stored program. Fields SyntaxOk public bool SyntaxOk Field Value bool Properties PC Gets or sets the program counter. public override int PC { get; set; } Property Value int Methods Add(Command) Adds a command to the stored program. public override int Add(Command C) Parameters C Command The command to add. Returns int The index of the added command. Exceptions StoredProgramException Thrown when a null command is added. AddMethod(Method) Adds a method to the stored program. public override void AddMethod(Method M) Parameters M Method The method to add. AddVariable(Evaluation) Adds a variable to the stored program. public override void AddVariable(Evaluation Variable) Parameters Variable Evaluation The variable to add. Commandsleft() Checks if there are more commands left to execute. public override bool Commandsleft() Returns bool true if there are commands left; otherwise, false. DeleteVariable(string) Deletes a variable by name. public override void DeleteVariable(string varName) Parameters varName string The name of the variable to delete. EvaluateExpression(string) Evaluates an expression and returns the result as a string. public override string EvaluateExpression(string Exp) Parameters Exp string The expression to evaluate. Returns string The evaluated result as a string. Exceptions StoredProgramException Thrown when the expression syntax is invalid. EvaluateExpressionWithString(string) Evaluates a string expression and returns the result as a string. public override string EvaluateExpressionWithString(string expression) Parameters expression string The expression to evaluate. Returns string The evaluated result as a string. FindVariable(string) Finds the index of a variable by its name. public override int FindVariable(string varName) Parameters varName string The name of the variable to find. Returns int The index of the variable, or -1 if not found. GetMethod(string) Retrieves a method by name. public override Method GetMethod(string MethodName) Parameters MethodName string The name of the method to retrieve. Returns Method The BOOSE.Method object associated with the specified name. Exceptions StoredProgramException Thrown when the method is not found. GetVarValue(string) Retrieves the value of a variable as a string. public override string GetVarValue(string varName) Parameters varName string The name of the variable to retrieve the value for. Returns string The string representation of the variable's value. Exceptions StoredProgramException Thrown when the variable is not found. GetVariable(int) Retrieves a variable by its index in the variables list. public override Evaluation GetVariable(int index) Parameters index int The index of the variable to retrieve. Returns Evaluation The BOOSE.Evaluation object at the specified index. Exceptions StoredProgramException Thrown when the index is invalid. GetVariable(string) Retrieves a variable by name. public override Evaluation GetVariable(string VarName) Parameters VarName string The name of the variable to retrieve. Returns Evaluation The BOOSE.Evaluation object associated with the specified name. Exceptions StoredProgramException Thrown when the variable is not found. IsExpression(string) Determines whether a string expression is a valid expression. public override bool IsExpression(string expression) Parameters expression string The expression to check. Returns bool true if the expression is valid; otherwise, false. NextCommand() Retrieves the next command to execute and increments the program counter. public override object NextCommand() Returns object The next command to execute. Pop() Pops a conditional command from the stack. public override ConditionalCommand Pop() Returns ConditionalCommand The popped BOOSE.ConditionalCommand. Exceptions StoredProgramException Thrown when there is an error popping from the stack. Push(ConditionalCommand) Pushes a conditional command onto the stack. public override void Push(ConditionalCommand Com) Parameters Com ConditionalCommand The conditional command to push. ResetProgram() Resets the program to its initial state. Clears the canvas, variables, and sets the program counter to zero. public virtual void ResetProgram() Run() Runs the stored program, executing all commands until none are left. public override void Run() UpdateVariable(string, bool) Updates the value of a variable with a boolean value. public override void UpdateVariable(string varName, bool value) Parameters varName string The name of the variable to update. value bool The new boolean value to set. Exceptions CommandException Thrown when the variable type is invalid. UpdateVariable(string, double) Updates the value of a variable with a double value. public override void UpdateVariable(string varName, double value) Parameters varName string The name of the variable to update. value double The new double value to set. Exceptions CommandException Thrown when the variable type is invalid. UpdateVariable(string, int) Updates the value of a variable with an integer value. public override void UpdateVariable(string varName, int value) Parameters varName string The name of the variable to update. value int The new integer value to set. VariableExists(string) Checks if a variable exists by name. public override bool VariableExists(string varName) Parameters varName string The name of the variable to check. Returns bool true if the variable exists; otherwise, false."
  },
  "api/ASE_Riya_Joshi_77356746.PenColour.html": {
    "href": "api/ASE_Riya_Joshi_77356746.PenColour.html",
    "title": "Class PenColour | ASE Project",
    "keywords": "Class PenColour Namespace ASE_Riya_Joshi_77356746 Assembly ASE_Riya_Joshi_77356746.dll Represents a command to set the pen color on the canvas using RGB values. public class PenColour : CommandThreeParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters CommandThreeParameters PenColour Implements ICommand Inherited Members CommandThreeParameters.param3 CommandThreeParameters.param3unprocessed CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PenColour() Initializes a new instance of the PenColour class. public PenColour() PenColour(Canvas, int, int, int) Initializes a new instance of the PenColour class with the specified canvas and RGB values. public PenColour(Canvas canvas, int r, int g, int b) Parameters canvas Canvas The canvas on which the pen color will be set. r int The red component of the color (0-255). g int The green component of the color (0-255). b int The blue component of the color (0-255). Methods CheckParameters(string[]) Validates the parameters for the pen color command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of parameters representing the RGB components. Exceptions CommandException Thrown if the number of parameters is incorrect or if the RGB values are invalid (non-integers or out of range). Exception Thrown for any unexpected errors during validation. Execute() Executes the command to set the pen color on the canvas. public override void Execute() Exceptions RestrictionException Thrown if any RGB component is outside the range 0-255. IndexOutOfRangeException Thrown if the parameter indices are invalid. Exception Thrown for any unexpected errors during execution."
  },
  "api/ASE_Riya_Joshi_77356746.Rectangle.html": {
    "href": "api/ASE_Riya_Joshi_77356746.Rectangle.html",
    "title": "Class Rectangle | ASE Project",
    "keywords": "Class Rectangle Namespace ASE_Riya_Joshi_77356746 Assembly ASE_Riya_Joshi_77356746.dll Represents a command to draw a rectangle on the canvas. public class Rectangle : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters Rectangle Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Rectangle() Initializes a new instance of the Rectangle class. public Rectangle() Rectangle(Canvas, int, int) Initializes a new instance of the Rectangle class with the specified canvas, width, and height. public Rectangle(Canvas canvas, int width, int height) Parameters canvas Canvas The canvas on which the rectangle will be drawn. width int The width of the rectangle. height int The height of the rectangle. Methods CheckParameters(string[]) Validates the parameters for the rectangle command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of parameters representing the width and height. Exceptions CommandException Thrown if the number of parameters is incorrect or if the dimensions are invalid (non-positive or not integers). Exception Thrown for any unexpected errors during validation. Execute() Executes the command to draw a rectangle on the canvas. public override void Execute() Exceptions RestrictionException Thrown if the width or height exceeds 2000. IndexOutOfRangeException Thrown if the parameter indices are invalid. Exception Thrown for any unexpected errors during execution."
  },
  "api/ASE_Riya_Joshi_77356746.Reset.html": {
    "href": "api/ASE_Riya_Joshi_77356746.Reset.html",
    "title": "Class Reset | ASE Project",
    "keywords": "Class Reset Namespace ASE_Riya_Joshi_77356746 Assembly ASE_Riya_Joshi_77356746.dll Represents a command to reset the canvas to its initial state. public class Reset : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter Reset Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Reset() Initializes a new instance of the Reset class. public Reset() Reset(Canvas) Initializes a new instance of the Reset class with the specified canvas. public Reset(Canvas c) Parameters c Canvas The canvas to be reset. Methods CheckParameters(string[]) Validates the parameters for the reset command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of parameters for the command. Not used in this implementation. Remarks No validation is required as the reset command does not take any parameters. Execute() Executes the command to reset the canvas. public override void Execute()"
  },
  "api/ASE_Riya_Joshi_77356746.Tri.html": {
    "href": "api/ASE_Riya_Joshi_77356746.Tri.html",
    "title": "Class Tri | ASE Project",
    "keywords": "Class Tri Namespace ASE_Riya_Joshi_77356746 Assembly ASE_Riya_Joshi_77356746.dll Represents a command to draw a triangle on the canvas. public class Tri : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters Tri Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Tri() Initializes a new instance of the Tri class. public Tri() Tri(Canvas, int, int) Initializes a new instance of the Tri class with the specified canvas, base length, and height. public Tri(Canvas c, int baseLength, int height) Parameters c Canvas The canvas on which to draw the triangle. baseLength int The base length of the triangle. height int The height of the triangle. Methods CheckParameters(string[]) Validates the parameters for the triangle command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of string parameters to validate. Exceptions CommandException Thrown if the parameter list is null or does not contain exactly two parameters. Exception Thrown for any unexpected errors during validation. Execute() Executes the command to draw a triangle on the canvas. public override void Execute() Exceptions RestrictionException Thrown if the base length or height exceeds 2000. Exception Thrown for any unexpected errors during execution."
  },
  "api/ASE_Riya_Joshi_77356746.WriteText.html": {
    "href": "api/ASE_Riya_Joshi_77356746.WriteText.html",
    "title": "Class WriteText | ASE Project",
    "keywords": "Class WriteText Namespace ASE_Riya_Joshi_77356746 Assembly ASE_Riya_Joshi_77356746.dll Represents a command that writes text to a canvas. This command takes a single parameter, which is the text to be written. public class WriteText : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter WriteText Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors WriteText() Initializes a new instance of the WriteText class. public WriteText() WriteText(Canvas, string) Initializes a new instance of the WriteText class with the specified canvas and text. public WriteText(Canvas c, string text) Parameters c Canvas The canvas to which the text will be written. text string The text to write. Methods CheckParameters(string[]) Checks the parameters for the command. Ensures that there is exactly one parameter for the text. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters to check. Exceptions CommandException Thrown when the number of parameters is invalid or when the text is null, empty, or whitespace. Execute() Executes the write text command. Processes the text and writes it to the canvas after validation. public override void Execute()"
  },
  "api/ASE_Riya_Joshi_77356746.html": {
    "href": "api/ASE_Riya_Joshi_77356746.html",
    "title": "Namespace ASE_Riya_Joshi_77356746 | ASE Project",
    "keywords": "Namespace ASE_Riya_Joshi_77356746 Classes AppArray Represents an array that can hold either integer or real values. This class provides methods for defining, accessing, and manipulating arrays. AppBoolean Represents a boolean value in the application, inheriting from BOOSE.Boolean. This class may be extended in the future to implement specific restrictions or behaviors for boolean values. AppCast Represents a cast command that converts a value from one type to another. This class inherits from BOOSE.Command and is specifically used to cast between AppInt and AppReal. AppCircle Represents the Circle command that draws a circle on the canvas. AppConditionalCommand Represents a conditional command that extends the functionality of BOOSE.ConditionalCommand. Provides additional logic for resetting or decreasing internal counters. AppDrawTo Represents the DrawTo command that draws a line from the current position to the specified coordinates. AppElse Represents an \"else\" command in the application, inheriting from ApplicationCompoundCommand. This command is used in conditional constructs to provide alternative execution paths. AppEnd Represents an \"end\" command in the application, inheriting from ApplicationCompoundCommand. Handles the compilation and execution logic for ending various control flow constructs like \"if\", \"while\", and \"for\". AppFor AppIf Represents an application-specific \"if\" command, inheriting from ApplicationCompoundCommand. Provides functionality for managing restrictions specific to conditional \"if\" operations. AppInt Represents an application-specific implementation of the BOOSE.Int class. Provides functionality for defining and managing restrictions specific to integer operations. AppMoveTo Represents a command to move the pen to a specified position on the canvas. AppPeek Represents a Peek operation, inheriting from AppArray. Provides functionality for parameter validation, compilation, and execution specific to the Peek operation. AppPoke Represents a Poke operation, inheriting from AppArray. Provides functionality for parameter validation, compilation, execution, and setting stored programs. AppReal Represents a real implementation of the BOOSE.Real class. AppWhile Represents an application-specific compound command with customizable functionality. ApplicationCompoundCommand Represents a compound command in the application, inheriting from AppConditionalCommand. Provides functionality for managing corresponding commands and validating parameters. Clear Represents the Clear command that clears the canvas. Form1 GloabalConfig Represents a global configuration class that maintains the application's global state. MyFill Represents the Fill command that sets the filled state for shapes on the canvas. MyMethod Represents a custom method that extends the functionality of the base Method class. This class provides methods to reset or decrease restriction and method counts. MyPenColour Represents a command to set the pen color on the canvas using RGB values. MyPenSize MyRectangle Represents a command to draw a rectangle on the canvas. MyStoredProgram Represents a stored program that can manage variables, methods, and command execution. This class extends the functionality of the base BOOSE.StoredProgram class. Reset Represents a command to reset the canvas to its initial state. Tri Represents a command to draw a triangle on the canvas. WriteText Represents a command that writes text to a canvas. This command takes a single parameter, which is the text to be written."
  },
  "api/ASE_Test_Project.CommandFactoryTest.html": {
    "href": "api/ASE_Test_Project.CommandFactoryTest.html",
    "title": "Class CommandFactoryTest | ASE Project",
    "keywords": "Class CommandFactoryTest Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Test class to verify the behavior of the MyAppCommandFactory and its command creation logic. [TestClass] public class CommandFactoryTest Inheritance object CommandFactoryTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SetUp() Sets up the test environment by initializing a new MyAppCommandFactory instance. [TestInitialize] public void SetUp() TestMakeCommand_Array_ShouldReturnReset() Tests that the \"array\" command returns a AppArray object. [TestMethod] public void TestMakeCommand_Array_ShouldReturnReset() TestMakeCommand_Boolean_ShouldReturnReset() Tests that the \"boolean\" command returns a AppBoolean object. [TestMethod] public void TestMakeCommand_Boolean_ShouldReturnReset() TestMakeCommand_Call_ShouldReturnReset() Tests that the \"call\" command returns a BOOSE.Call object. [TestMethod] public void TestMakeCommand_Call_ShouldReturnReset() TestMakeCommand_Circle_ShouldReturnAppCircle() Tests that the \"circle\" command returns a AppCircle object. [TestMethod] public void TestMakeCommand_Circle_ShouldReturnAppCircle() TestMakeCommand_Clear_ShouldReturnClear() Tests that the \"clear\" command returns a Clear object. [TestMethod] public void TestMakeCommand_Clear_ShouldReturnClear() TestMakeCommand_DrawTo_ShouldReturnAppDrawTo() Tests that the \"drawto\" command returns a AppDrawTo object. [TestMethod] public void TestMakeCommand_DrawTo_ShouldReturnAppDrawTo() TestMakeCommand_Else_ShouldReturnReset() Tests that the \"else\" command returns a AppElse object. [TestMethod] public void TestMakeCommand_Else_ShouldReturnReset() TestMakeCommand_End_ShouldReturnReset() Tests that the \"end\" command returns a AppEnd object. [TestMethod] public void TestMakeCommand_End_ShouldReturnReset() TestMakeCommand_Evaluation_ShouldReturnReset() Tests that the \"call\" command returns a BOOSE.Evaluation object. [TestMethod] public void TestMakeCommand_Evaluation_ShouldReturnReset() TestMakeCommand_Fill_ShouldReturnFill() Tests that the \"fill\" command returns a MyFill object. [TestMethod] public void TestMakeCommand_Fill_ShouldReturnFill() TestMakeCommand_For_ShouldReturnReset() Tests that the \"for\" command returns a AppFor object. [TestMethod] public void TestMakeCommand_For_ShouldReturnReset() TestMakeCommand_If_ShouldReturnReset() Tests that the \"else\" command returns a AppIf object. [TestMethod] public void TestMakeCommand_If_ShouldReturnReset() TestMakeCommand_Int_ShouldReturnReset() Tests that the \"int\" command returns a AppInt object. [TestMethod] public void TestMakeCommand_Int_ShouldReturnReset() TestMakeCommand_InvalidCommand_ShouldThrowFactoryException() Tests that invalid commands throw a BOOSE.FactoryException. [TestMethod] [ExpectedException(typeof(FactoryException))] public void TestMakeCommand_InvalidCommand_ShouldThrowFactoryException() TestMakeCommand_MoveTo_ShouldReturnAppMoveTo() Tests that the \"moveto\" command returns a AppMoveTo object. [TestMethod] public void TestMakeCommand_MoveTo_ShouldReturnAppMoveTo() TestMakeCommand_Peek_ShouldReturnReset() Tests that the \"poke\" command returns a AppPeek object. [TestMethod] public void TestMakeCommand_Peek_ShouldReturnReset() TestMakeCommand_PenColour_ShouldReturnAppPenColour() Tests that the \"pencolour\" command returns a MyPenColour object. [TestMethod] public void TestMakeCommand_PenColour_ShouldReturnAppPenColour() TestMakeCommand_PenSize_ShouldReturnPenSize() Tests that the \"pensize\" command returns a MyPenSize object. [TestMethod] public void TestMakeCommand_PenSize_ShouldReturnPenSize() TestMakeCommand_Poke_ShouldReturnReset() Tests that the \"poke\" command returns a AppPoke object. [TestMethod] public void TestMakeCommand_Poke_ShouldReturnReset() TestMakeCommand_Rect_ShouldReturnAppRectangle() Tests that the \"rect\" command returns a MyRectangle object. [TestMethod] public void TestMakeCommand_Rect_ShouldReturnAppRectangle() TestMakeCommand_Reset_ShouldReturnReset() Tests that the \"reset\" command returns a Reset object. [TestMethod] public void TestMakeCommand_Reset_ShouldReturnReset() TestMakeCommand_Tri_ShouldReturnTriangle() Tests that the \"tri\" command returns a Tri object. [TestMethod] public void TestMakeCommand_Tri_ShouldReturnTriangle() TestMakeCommand_While_ShouldReturnReset() Tests that the \"while\" command returns a AppWhile object. [TestMethod] public void TestMakeCommand_While_ShouldReturnReset() TestMakeCommand_WriteTo_ShouldReturnWriteTo() Tests that the \"writeto\" command returns a WriteText object. [TestMethod] public void TestMakeCommand_WriteTo_ShouldReturnWriteTo() TestMakeCommand_method_ShouldReturnReset() Tests that the \"method\" command returns a MyMethod object. [TestMethod] public void TestMakeCommand_method_ShouldReturnReset()"
  },
  "api/ASE_Test_Project.CommandUnitTests.html": {
    "href": "api/ASE_Test_Project.CommandUnitTests.html",
    "title": "Class CommandUnitTests | ASE Project",
    "keywords": "Class CommandUnitTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll [TestClass] public class CommandUnitTests Inheritance object CommandUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Setup() [TestInitialize] public void Setup() Test_ArrayCommand_Restricted() public void Test_ArrayCommand_Restricted() Test_ArrayCommand_UnRestricted() public void Test_ArrayCommand_UnRestricted() Test_ForCommand_Restricted() [TestMethod] public void Test_ForCommand_Restricted() Test_ForCommand_Unrestricted() [TestMethod] public void Test_ForCommand_Unrestricted() Test_IFCommand_Restricted() [TestMethod] public void Test_IFCommand_Restricted() Test_IFCommand_Unrestricted() [TestMethod] public void Test_IFCommand_Unrestricted() Test_IntCommand_Restricted() [TestMethod] public void Test_IntCommand_Restricted() Test_IntCommand_UnRestricted() [TestMethod] public void Test_IntCommand_UnRestricted() Test_MethodCommand_UnRestricted() public void Test_MethodCommand_UnRestricted() Test_MultipleCommand_ShouldNotChangeGlobalOutputExceptionMsg() [TestMethod] public void Test_MultipleCommand_ShouldNotChangeGlobalOutputExceptionMsg() Test_ProgramSizeCommand_UnRestricted() public void Test_ProgramSizeCommand_UnRestricted() Test_RealCommand_Restricted() [TestMethod] public void Test_RealCommand_Restricted() Test_RealCommand_Unrestricted() [TestMethod] public void Test_RealCommand_Unrestricted() Test_RunProgram_ShouldNotChangeGlobalOutputExceptionMsg() [TestMethod] public void Test_RunProgram_ShouldNotChangeGlobalOutputExceptionMsg() Test_RunSingleCommand_ShouldNotChangeGlobalOutputExceptionMsg() Tests that running a single command does not change the global output exception message. [TestMethod] public void Test_RunSingleCommand_ShouldNotChangeGlobalOutputExceptionMsg() Examples This test runs a single moveto command and verifies that no exception is thrown: mockParser.ParseProgram(\"moveto 100,100\"); program.Run(); Assert.IsTrue(true, \"No exception should be thrown when a valid single command is executed.\"); Remarks Validates that even when a single valid command is executed, no exception is thrown during execution. Test_WhileCommand_Restricted() [TestMethod] public void Test_WhileCommand_Restricted() Test_WhileCommand_Unrestricted() [TestMethod] public void Test_WhileCommand_Unrestricted()"
  },
  "api/ASE_Test_Project.GlobalConfigTest.html": {
    "href": "api/ASE_Test_Project.GlobalConfigTest.html",
    "title": "Class GlobalConfigTest | ASE Project",
    "keywords": "Class GlobalConfigTest Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Test class for validating the functionality of the GlobalConfig class. [TestClass] public class GlobalConfigTest Inheritance object GlobalConfigTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods TestSetAndGetIsFillEnabled() Tests setting and getting the IsFillEnabled property in GlobalConfig. [TestMethod] public void TestSetAndGetIsFillEnabled() TestSetAndGetMaxX() Tests setting and getting the MaxX property in GlobalConfig. [TestMethod] public void TestSetAndGetMaxX() TestSetAndGetMaxY() Tests setting and getting the MaxY property in GlobalConfig. [TestMethod] public void TestSetAndGetMaxY() TestSetAndGetPenSize() Tests setting and getting the PenSize property in GlobalConfig. [TestMethod] public void TestSetAndGetPenSize()"
  },
  "api/ASE_Test_Project.MyAppCanvasTest.html": {
    "href": "api/ASE_Test_Project.MyAppCanvasTest.html",
    "title": "Class MyAppCanvasTest | ASE Project",
    "keywords": "Class MyAppCanvasTest Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Test class for MyAppCanvas to validate its methods and functionality. [TestClass] public class MyAppCanvasTest Inheritance object MyAppCanvasTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields canvas Instance of MyAppCanvas used in tests. public MyAppCanvas canvas Field Value MyAppCanvas Methods DrawTo_ShouldThrowException_WhenCoordinatesAreOutOfBounds() Verifies that drawing to out-of-bounds coordinates throws a CanvasException. [TestMethod] [ExpectedException(typeof(CanvasException))] public void DrawTo_ShouldThrowException_WhenCoordinatesAreOutOfBounds() DrawTo_ShouldThrowException_WhenGraphicsContextIsNull() Verifies that drawing to a null graphics context throws a CanvasException. [TestMethod] [ExpectedException(typeof(CanvasException))] public void DrawTo_ShouldThrowException_WhenGraphicsContextIsNull() DrawTo_ShouldUpdateCursorPosition_WhenCoordinatesAreValid() Tests drawing to valid coordinates and updating the cursor position. [TestMethod] public void DrawTo_ShouldUpdateCursorPosition_WhenCoordinatesAreValid() MoveTo_ShouldThrowException_WhenCoordinatesAreOutOfBounds() Verifies that moving to out-of-bounds coordinates throws a CanvasException. [TestMethod] [ExpectedException(typeof(CanvasException))] public void MoveTo_ShouldThrowException_WhenCoordinatesAreOutOfBounds() MoveTo_ShouldUpdateCursorPosition_WhenCoordinatesAreValid() Tests moving to valid coordinates and updating the cursor position. [TestMethod] public void MoveTo_ShouldUpdateCursorPosition_WhenCoordinatesAreValid() Rect_ShouldDrawFilledRectangle_WhenValid() Tests drawing a filled rectangle with valid dimensions. [TestMethod] public void Rect_ShouldDrawFilledRectangle_WhenValid() Rect_ShouldThrowException_WhenDimensionsAreInvalid() Verifies that invalid rectangle dimensions throw a CanvasException. [TestMethod] [ExpectedException(typeof(CanvasException))] public void Rect_ShouldThrowException_WhenDimensionsAreInvalid() SetCanvas_ShouldInitialize_WhenBitmapAndGraphicsAreValid() Tests initializing the canvas with valid Bitmap and Graphics objects. [TestMethod] public void SetCanvas_ShouldInitialize_WhenBitmapAndGraphicsAreValid() SetColour_ShouldThrowException_WhenRGBValuesAreInvalid() Verifies that setting invalid RGB values for color throws a CanvasException. [TestMethod] [ExpectedException(typeof(CanvasException))] public void SetColour_ShouldThrowException_WhenRGBValuesAreInvalid() SetUp() Sets up the test environment by initializing the canvas. [TestInitialize] public void SetUp() TestBoundaryPenPosition() Tests boundary conditions for pen position. [TestMethod] public void TestBoundaryPenPosition() TestCircleExceedsCanvas() Verifies that drawing a circle exceeding canvas boundaries throws a CanvasException. [TestMethod] [ExpectedException(typeof(CanvasException))] public void TestCircleExceedsCanvas() TestCustomCanvasSizeInitialization() Tests initialization of the canvas with custom size. [TestMethod] public void TestCustomCanvasSizeInitialization() TestDefaultConstructor() Tests the default constructor of MyAppCanvas. [TestMethod] public void TestDefaultConstructor() TestDrawCircleInvalidRadius() Tests drawing a circle with an invalid radius. [TestMethod] public void TestDrawCircleInvalidRadius() TestDrawCircleValid() Verifies that a valid circle can be drawn. [TestMethod] public void TestDrawCircleValid() TestExceedMaximumCanvasSize() Verifies that exceeding maximum canvas size throws a CanvasException. [TestMethod] [ExpectedException(typeof(CanvasException))] public void TestExceedMaximumCanvasSize() TestInvalidCanvasSize_ShouldThrowCanvasException() Verifies that invalid canvas sizes throw a CanvasException. [TestMethod] public void TestInvalidCanvasSize_ShouldThrowCanvasException() TestResetCanvas() Tests resetting the canvas to its default state. [TestMethod] public void TestResetCanvas() TestSetPenColorValid() Tests setting a valid pen color. [TestMethod] public void TestSetPenColorValid() TestSetPenPositionInvalid() Tests setting invalid pen position coordinates. [TestMethod] public void TestSetPenPositionInvalid() TestSetPenPositionValid() Tests setting valid pen position coordinates. [TestMethod] public void TestSetPenPositionValid() TestSetPenSizeInvalid() Tests setting invalid pen sizes and ensures default value is used. [TestMethod] public void TestSetPenSizeInvalid() TestSetPenSizeValid() Tests setting a valid pen size. [TestMethod] public void TestSetPenSizeValid() TestToggleShapeFilling() Tests toggling the shape filling property. [TestMethod] public void TestToggleShapeFilling()"
  },
  "api/ASE_Test_Project.MyCircleUnitTests.html": {
    "href": "api/ASE_Test_Project.MyCircleUnitTests.html",
    "title": "Class MyCircleUnitTests | ASE Project",
    "keywords": "Class MyCircleUnitTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Unit tests for the Circle class in the ASE_Riya_Joshi_77356746 namespace. [TestClass] public class MyCircleUnitTests Inheritance object MyCircleUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Tests the CheckParameters method of the Circle class to ensure it does not throw an exception for valid parameters. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests the constructor of the Circle class to ensure it initializes correctly with valid parameters. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() TestInitialize() Initializes the test by setting up the mock Canvas object. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Test_Project.MyClearUnitTests.html": {
    "href": "api/ASE_Test_Project.MyClearUnitTests.html",
    "title": "Class MyClearUnitTests | ASE Project",
    "keywords": "Class MyClearUnitTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Unit tests for the Clear class, which represents the functionality to clear a canvas. [TestClass] public class MyClearUnitTests Inheritance object MyClearUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldIgnoreAdditionalParameters() Tests the CheckParameters method to ensure it ignores additional parameters without throwing an exception. [TestMethod] public void CheckParameters_ShouldIgnoreAdditionalParameters() CheckParameters_ShouldNotThrowException_WhenParameterListIsEmpty() Tests the CheckParameters method to ensure it does not throw an exception when the parameter list is empty. [TestMethod] public void CheckParameters_ShouldNotThrowException_WhenParameterListIsEmpty() CheckParameters_ShouldNotThrowException_WhenParameterListIsNull() Tests the CheckParameters method to ensure it does not throw an exception when the parameter list is null. [TestMethod] public void CheckParameters_ShouldNotThrowException_WhenParameterListIsNull() Constructor_ShouldInitialize_WhenCanvasIsValid() Tests the constructor of the Clear class to ensure it initializes correctly with a valid Canvas. [TestMethod] public void Constructor_ShouldInitialize_WhenCanvasIsValid() Execute_ShouldClearCanvas_WhenCanvasIsValid() Tests the Execute method to ensure the canvas is cleared when the Canvas is valid. [TestMethod] public void Execute_ShouldClearCanvas_WhenCanvasIsValid() Execute_ShouldHandleNullCanvas_Gracefully() Tests the Execute method to ensure it handles a null Canvas gracefully by throwing a NullReferenceException. [TestMethod] public void Execute_ShouldHandleNullCanvas_Gracefully() Execute_ShouldNotThrowException_WhenCanvasIsEmpty() Tests the Execute method to ensure no exception is thrown when the canvas is empty. [TestMethod] public void Execute_ShouldNotThrowException_WhenCanvasIsEmpty() TestInitialize() Initializes the test by setting up the mock Canvas object. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Test_Project.MyCommandFactoryTest.html": {
    "href": "api/ASE_Test_Project.MyCommandFactoryTest.html",
    "title": "Class MyCommandFactoryTest | ASE Project",
    "keywords": "Class MyCommandFactoryTest Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Unit tests for the MyAppCommandFactory class to verify command creation functionality. [TestClass] public class MyCommandFactoryTest Inheritance object MyCommandFactoryTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SetUp() Sets up the test environment by initializing a new instance of MyAppCommandFactory. [TestInitialize] public void SetUp() TestMakeCommand_Circle_ShouldReturnAppCircle() Tests whether the factory creates an instance of the AppCircle command. [TestMethod] public void TestMakeCommand_Circle_ShouldReturnAppCircle() TestMakeCommand_Clear_ShouldReturnClear() Tests whether the factory creates an instance of the Clear command. [TestMethod] public void TestMakeCommand_Clear_ShouldReturnClear() TestMakeCommand_DrawTo_ShouldReturnAppDrawTo() Tests whether the factory creates an instance of the AppDrawTo command. [TestMethod] public void TestMakeCommand_DrawTo_ShouldReturnAppDrawTo() TestMakeCommand_Fill_ShouldReturnFill() Tests whether the factory creates an instance of the Fill command. [TestMethod] public void TestMakeCommand_Fill_ShouldReturnFill() TestMakeCommand_InvalidCommand_ShouldThrowFactoryException() Tests whether the factory throws a FactoryException for invalid commands. [TestMethod] [ExpectedException(typeof(FactoryException))] public void TestMakeCommand_InvalidCommand_ShouldThrowFactoryException() TestMakeCommand_MoveTo_ShouldReturnAppMoveTo() Tests whether the factory creates an instance of the AppMoveTo command. [TestMethod] public void TestMakeCommand_MoveTo_ShouldReturnAppMoveTo() TestMakeCommand_PenColour_ShouldReturnAppPenColour() Tests whether the factory creates an instance of the AppPenColour command. [TestMethod] public void TestMakeCommand_PenColour_ShouldReturnAppPenColour() TestMakeCommand_PenSize_ShouldReturnPenSize() Tests whether the factory creates an instance of the PenSize command. [TestMethod] public void TestMakeCommand_PenSize_ShouldReturnPenSize() TestMakeCommand_Rect_ShouldReturnAppRectangle() Tests whether the factory creates an instance of the AppRectangle command. [TestMethod] public void TestMakeCommand_Rect_ShouldReturnAppRectangle() TestMakeCommand_Reset_ShouldReturnReset() Tests whether the factory creates an instance of the Reset command. [TestMethod] public void TestMakeCommand_Reset_ShouldReturnReset() TestMakeCommand_Tri_ShouldReturnTriangle() Tests whether the factory creates an instance of the Triangle command. [TestMethod] public void TestMakeCommand_Tri_ShouldReturnTriangle() TestMakeCommand_WriteTo_ShouldReturnWriteTo() Tests whether the factory creates an instance of the WriteTo command. [TestMethod] public void TestMakeCommand_WriteTo_ShouldReturnWriteTo()"
  },
  "api/ASE_Test_Project.MyDrawToUnitTests.html": {
    "href": "api/ASE_Test_Project.MyDrawToUnitTests.html",
    "title": "Class MyDrawToUnitTests | ASE Project",
    "keywords": "Class MyDrawToUnitTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Unit tests for the DrawTo command class. [TestClass] public class MyDrawToUnitTests Inheritance object MyDrawToUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Tests whether the CheckParameters method does not throw an exception when given valid parameters. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests whether the DrawTo constructor successfully initializes with valid parameters. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() Constructor_ShouldThrowRestrictionException_WhenCoordinatesAreNegative() Tests whether the DrawTo constructor throws a RestrictionException when given negative coordinates. [TestMethod] public void Constructor_ShouldThrowRestrictionException_WhenCoordinatesAreNegative() TestInitialize() Initializes the test environment by creating a mock Canvas object. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Test_Project.MyMoveToUnitTests.html": {
    "href": "api/ASE_Test_Project.MyMoveToUnitTests.html",
    "title": "Class MyMoveToUnitTests | ASE Project",
    "keywords": "Class MyMoveToUnitTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Unit tests for the MoveTo command class. [TestClass] public class MyMoveToUnitTests Inheritance object MyMoveToUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Tests whether the CheckParameters method does not throw an exception when given valid parameters. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests whether the MoveTo constructor successfully initializes with valid parameters. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() Constructor_ShouldThrowRestrictionException_WhenCoordinatesExceedLimit() Tests whether the MoveTo constructor throws a RestrictionException when coordinates exceed the allowed limit. [TestMethod] public void Constructor_ShouldThrowRestrictionException_WhenCoordinatesExceedLimit() TestInitialize() Initializes the test environment by creating a mock Canvas object. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Test_Project.MyPenColourUnitTests.html": {
    "href": "api/ASE_Test_Project.MyPenColourUnitTests.html",
    "title": "Class MyPenColourUnitTests | ASE Project",
    "keywords": "Class MyPenColourUnitTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Unit tests for the PenColour command class. [TestClass] public class MyPenColourUnitTests Inheritance object MyPenColourUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Tests whether the CheckParameters method does not throw an exception when given valid parameters. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests whether the PenColour constructor successfully initializes with valid parameters. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() TestInitialize() Initializes the test environment by creating a mock Canvas object. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Test_Project.MyRectangleUnitTests.html": {
    "href": "api/ASE_Test_Project.MyRectangleUnitTests.html",
    "title": "Class MyRectangleUnitTests | ASE Project",
    "keywords": "Class MyRectangleUnitTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Unit tests for the MyRectangle class. [TestClass] public class MyRectangleUnitTests Inheritance object MyRectangleUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Tests that the CheckParameters method does not throw an exception when valid parameters are provided. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests that the Rectangle constructor initializes properly with valid parameters. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() TestInitialize() Initializes the test environment by creating a mock canvas object. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Test_Project.MyResetsUnitTests.html": {
    "href": "api/ASE_Test_Project.MyResetsUnitTests.html",
    "title": "Class MyResetsUnitTests | ASE Project",
    "keywords": "Class MyResetsUnitTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Unit tests for the Reset class. [TestClass] public class MyResetsUnitTests Inheritance object MyResetsUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldIgnoreAdditionalParameters() Tests that the CheckParameters method ignores additional parameters without throwing exceptions. [TestMethod] public void CheckParameters_ShouldIgnoreAdditionalParameters() CheckParameters_ShouldNotThrowException_WhenParameterListIsEmpty() Tests that the CheckParameters method does not throw an exception when the parameter list is empty. [TestMethod] public void CheckParameters_ShouldNotThrowException_WhenParameterListIsEmpty() CheckParameters_ShouldNotThrowException_WhenParameterListIsNull() Tests that the CheckParameters method does not throw an exception when the parameter list is null. [TestMethod] public void CheckParameters_ShouldNotThrowException_WhenParameterListIsNull() Constructor_ShouldInitialize_WhenCanvasIsValid() Tests that the Reset constructor initializes properly when provided with a valid canvas. [TestMethod] public void Constructor_ShouldInitialize_WhenCanvasIsValid() Execute_ShouldThrowNullReferenceException_WhenCanvasIsNull() Tests that the Execute method throws a NullReferenceException when called without a canvas. [TestMethod] public void Execute_ShouldThrowNullReferenceException_WhenCanvasIsNull() TestInitialize() Initializes the test environment by creating a mock canvas object. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Test_Project.MyStoredProgramUnitTests.html": {
    "href": "api/ASE_Test_Project.MyStoredProgramUnitTests.html",
    "title": "Class MyStoredProgramUnitTests | ASE Project",
    "keywords": "Class MyStoredProgramUnitTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll [TestClass] public class MyStoredProgramUnitTests Inheritance object MyStoredProgramUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Setup() [TestInitialize] public void Setup() Test_AddVariable_Duplicate_ShouldNotStore() [TestMethod] public void Test_AddVariable_Duplicate_ShouldNotStore() Test_AddVariable_ShouldStoreVariable() [TestMethod] public void Test_AddVariable_ShouldStoreVariable() Test_EvaluateExpression_Invalid_ShouldThrowException() [TestMethod] public void Test_EvaluateExpression_Invalid_ShouldThrowException() Test_EvaluateExpression_ShouldReturnResult() [TestMethod] public void Test_EvaluateExpression_ShouldReturnResult() Test_InitializeProgram_ShouldSetDefaults() [TestMethod] public void Test_InitializeProgram_ShouldSetDefaults() Test_PopEmptyStack_ShouldThrowException() [TestMethod] public void Test_PopEmptyStack_ShouldThrowException() Test_PushPopConditionalCommands_ShouldHandleStack() [TestMethod] public void Test_PushPopConditionalCommands_ShouldHandleStack() Test_UpdateVariable_ShouldUpdateValue() [TestMethod] public void Test_UpdateVariable_ShouldUpdateValue()"
  },
  "api/ASE_Test_Project.MyTriangleTests.html": {
    "href": "api/ASE_Test_Project.MyTriangleTests.html",
    "title": "Class MyTriangleTests | ASE Project",
    "keywords": "Class MyTriangleTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Unit tests for the Tri (Triangle) class. [TestClass] public class MyTriangleTests Inheritance object MyTriangleTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Tests that the CheckParameters method does not throw an exception when valid parameters are provided. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests that the Tri constructor initializes properly when valid parameters are provided. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() Constructor_ShouldSetBaseLengthAndHeightCorrectly() Tests that the Tri constructor correctly sets the base length and height when valid parameters are given. [TestMethod] public void Constructor_ShouldSetBaseLengthAndHeightCorrectly() TestInitialize() Initializes the test environment by creating a mock canvas object. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Test_Project.MyWriteToUnitTests.html": {
    "href": "api/ASE_Test_Project.MyWriteToUnitTests.html",
    "title": "Class MyWriteToUnitTests | ASE Project",
    "keywords": "Class MyWriteToUnitTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Unit tests for the WriteText class. [TestClass] public class MyWriteToUnitTests Inheritance object MyWriteToUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParameterIsValid() Tests that the CheckParameters method does not throw an exception when valid parameters are provided. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParameterIsValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests that the WriteText constructor initializes properly when valid parameters are provided. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() TestInitialize() Initializes the test environment by creating a mock canvas object. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Test_Project.ParserTest.html": {
    "href": "api/ASE_Test_Project.ParserTest.html",
    "title": "Class ParserTest | ASE Project",
    "keywords": "Class ParserTest Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Unit tests for the AppParser class. [TestClass] public class ParserTest Inheritance object ParserTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SetUp() Sets up the test environment by initializing real instances of the required classes. [TestInitialize] public void SetUp() TestParseCommand_ShouldReturnValidCommand_ForKnownCommand() Tests that the parser returns a valid command for a known command line. [TestMethod] public void TestParseCommand_ShouldReturnValidCommand_ForKnownCommand()"
  },
  "api/ASE_Test_Project.PenSizeUnitTests.html": {
    "href": "api/ASE_Test_Project.PenSizeUnitTests.html",
    "title": "Class PenSizeUnitTests | ASE Project",
    "keywords": "Class PenSizeUnitTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Unit tests for the MyPenSize class. [TestClass] public class PenSizeUnitTests Inheritance object PenSizeUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Tests that the CheckParameters method does not throw an exception when valid parameters are provided. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests that the MyPenSize constructor initializes properly when valid parameters are provided. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() Execute_ShouldHandleBoundaryValue_Zero() Tests that the Execute method correctly handles the boundary value of zero for pen size. [TestMethod] public void Execute_ShouldHandleBoundaryValue_Zero() TestInitialize() Initializes the test environment by creating a mock canvas object. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Test_Project.html": {
    "href": "api/ASE_Test_Project.html",
    "title": "Namespace ASE_Test_Project | ASE Project",
    "keywords": "Namespace ASE_Test_Project Classes CommandFactoryTest Test class to verify the behavior of the MyAppCommandFactory and its command creation logic. CommandUnitTests GlobalConfigTest Test class for validating the functionality of the GlobalConfig class. MyAppCanvasTest Test class for MyAppCanvas to validate its methods and functionality. MyCircleUnitTests Unit tests for the Circle class in the ASE_Riya_Joshi_77356746 namespace. MyClearUnitTests Unit tests for the Clear class, which represents the functionality to clear a canvas. MyDrawToUnitTests Unit tests for the DrawTo command class. MyMoveToUnitTests Unit tests for the MoveTo command class. MyPenColourUnitTests Unit tests for the PenColour command class. MyRectangleUnitTests Unit tests for the MyRectangle class. MyResetsUnitTests Unit tests for the Reset class. MyStoredProgramUnitTests MyTriangleTests Unit tests for the Tri (Triangle) class. MyWriteToUnitTests Unit tests for the WriteText class. ParserTest Unit tests for the AppParser class. PenSizeUnitTests Unit tests for the MyPenSize class."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | ASE Project",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | ASE Project",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | ASE Project",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}